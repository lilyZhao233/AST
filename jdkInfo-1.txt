"java.beans.Introspector#getBeanInfo(Class<?>)"
"java.beans.PropertyEditor#setAsText(java.lang.String)"
"java.io.BufferedInputStream#close()"
"java.io.BufferedInputStream#read()"
"java.io.BufferedOutputStream#flush()"
"java.io.BufferedOutputStream#write(byte[],int,int)"
"java.io.BufferedReader#close()"
"java.io.BufferedReader#read()"
"java.io.BufferedReader#read(char[],int,int)"
"java.io.BufferedReader#readLine()"
"java.io.BufferedWriter#close()"
"java.io.BufferedWriter#flush()"
"java.io.ByteArrayInputStream#close()"
"java.io.ByteArrayOutputStream#toString(java.lang.String)"
"java.io.CharArrayWriter#writeTo(java.io.Writer)"
"java.io.Closeable#close()"
"java.io.DataInput#readBoolean()"
"java.io.DataInput#readByte()"
"java.io.DataInput#readDouble()"
"java.io.DataInput#readFloat()"
"java.io.DataInput#readFully(byte[])"
"java.io.DataInput#readInt()"
"java.io.DataInput#readLong()"
"java.io.DataInput#readUTF()"
"java.io.DataInput#readUnsignedShort()"
"java.io.DataInput#skipBytes(int)"
"java.io.DataOutput#writeBoolean(boolean)"
"java.io.DataOutput#writeInt(int)"
"java.io.DataOutput#writeUTF(java.lang.String)"
"java.io.File#createNewFile()"
"java.io.File#createTempFile(java.lang.String,java.lang.String,java.io.File)"
"java.io.File#getCanonicalFile()"
"java.io.File#getCanonicalPath()"
"java.io.FileInputStream#FileInputStream(java.io.File)"
"java.io.FileInputStream#FileInputStream(java.lang.String)"
"java.io.FileInputStream#close()"
"java.io.FileInputStream#read(byte[])"
"java.io.FileOutputStream#FileOutputStream(java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File,boolean)"
"java.io.FileOutputStream#FileOutputStream(java.lang.String)"
"java.io.FileOutputStream#close()"
"java.io.FileOutputStream#write(byte[])"
"java.io.FileOutputStream#write(byte[],int,int)"
"java.io.FileReader#FileReader(java.io.File)"
"java.io.FileReader#FileReader(java.lang.String)"
"java.io.FileWriter#FileWriter(java.io.File)"
"java.io.FilterInputStream#read(byte[])"
"java.io.FilterOutputStream#close()"
"java.io.FilterOutputStream#write(byte[])"
"java.io.InputStream#available()"
"java.io.InputStream#close()"
"java.io.InputStream#read()"
"java.io.InputStream#read(byte[])"
"java.io.InputStream#read(byte[],int,int)"
"java.io.InputStream#reset()"
"java.io.InputStream#skip(long)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)"
"java.io.InputStreamReader#close()"
"java.io.InputStreamReader#read()"
"java.io.ObjectInput#readObject()"
"java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)"
"java.io.ObjectInputStream#close()"
"java.io.ObjectInputStream#defaultReadObject()"
"java.io.ObjectInputStream#readBoolean()"
"java.io.ObjectInputStream#readObject()"
"java.io.ObjectInputStream#readUTF()"
"java.io.ObjectOutput#write(byte[])"
"java.io.ObjectOutput#write(byte[],int,int)"
"java.io.ObjectOutput#writeObject(java.lang.Object)"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)"
"java.io.ObjectOutputStream#close()"
"java.io.ObjectOutputStream#defaultWriteObject()"
"java.io.ObjectOutputStream#flush()"
"java.io.ObjectOutputStream#writeBoolean(boolean)"
"java.io.ObjectOutputStream#writeObject(java.lang.Object)"
"java.io.ObjectOutputStream#writeUTF(java.lang.String)"
"java.io.OutputStream#close()"
"java.io.OutputStream#flush()"
"java.io.OutputStream#write(byte[])"
"java.io.OutputStream#write(byte[],int,int)"
"java.io.OutputStream#write(int)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)"
"java.io.OutputStreamWriter#flush()"
"java.io.OutputStreamWriter#write(int)"
"java.io.RandomAccessFile#RandomAccessFile(java.io.File,java.lang.String)"
"java.io.RandomAccessFile#close()"
"java.io.RandomAccessFile#seek(long)"
"java.io.RandomAccessFile#setLength(long)"
"java.io.RandomAccessFile#write(byte[],int,int)"
"java.io.Reader#close()"
"java.io.Reader#read()"
"java.io.Reader#read(char[])"
"java.io.Reader#read(char[],int,int)"
"java.io.StringReader#mark(int)"
"java.io.StringReader#read()"
"java.io.StringReader#reset()"
"java.io.StringReader#skip(long)"
"java.io.Writer#close()"
"java.io.Writer#flush()"
"java.io.Writer#write(char[])"
"java.io.Writer#write(char[],int,int)"
"java.io.Writer#write(int)"
"java.io.Writer#write(java.lang.String)"
"java.io.Writer#write(java.lang.String,int,int)"
"java.lang.Byte#decode(java.lang.String)"
"java.lang.Byte#parseByte(java.lang.String)"
"java.lang.Byte#valueOf(java.lang.String)"
"java.lang.Class#forName(java.lang.String)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)"
"java.lang.Class#getConstructor(Class<?>[])"
"java.lang.Class#getConstructors()"
"java.lang.Class#getDeclaredField(java.lang.String)"
"java.lang.Class#getDeclaredFields()"
"java.lang.Class#getDeclaredMethod(java.lang.String,Class<?>[])"
"java.lang.Class#getDeclaredMethods()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])"
"java.lang.Class#getMethods()"
"java.lang.Class#newInstance()"
"java.lang.ClassLoader#defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)"
"java.lang.ClassLoader#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)"
"java.lang.ClassLoader#getResources(java.lang.String)"
"java.lang.ClassLoader#getSystemResources(java.lang.String)"
"java.lang.ClassLoader#loadClass(java.lang.String)"
"java.lang.Double#Double(java.lang.String)"
"java.lang.Double#parseDouble(java.lang.String)"
"java.lang.Double#valueOf(java.lang.String)"
"java.lang.Float#parseFloat(java.lang.String)"
"java.lang.Float#valueOf(java.lang.String)"
"java.lang.Integer#decode(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String,int)"
"java.lang.Integer#valueOf(java.lang.String)"
"java.lang.Integer#valueOf(java.lang.String,int)"
"java.lang.Long#Long(java.lang.String)"
"java.lang.Long#decode(java.lang.String)"
"java.lang.Long#parseLong(java.lang.String)"
"java.lang.Long#parseLong(java.lang.String,int)"
"java.lang.Long#valueOf(java.lang.String)"
"java.lang.Object#clone()"
"java.lang.Object#wait()"
"java.lang.Object#wait(long)"
"java.lang.Process#waitFor()"
"java.lang.Runtime#exec(java.lang.String)"
"java.lang.Runtime#exec(java.lang.String[],java.lang.String[],java.io.File)"
"java.lang.Short#decode(java.lang.String)"
"java.lang.Short#parseShort(java.lang.String)"
"java.lang.Short#valueOf(java.lang.String)"
"java.lang.String#String(byte[],int,int,java.lang.String)"
"java.lang.String#String(byte[],java.lang.String)"
"java.lang.String#getBytes(java.lang.String)"
"java.lang.Thread#join()"
"java.lang.Thread#join(long)"
"java.lang.Thread#sleep(long)"
"java.lang.instrument.ClassFileTransformer#transform(java.lang.ClassLoader,java.lang.String,Class<?>,java.security.ProtectionDomain,byte[])"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)"
"java.lang.reflect.Array#get(java.lang.Object,int)"
"java.lang.reflect.Array#getLength(java.lang.Object)"
"java.lang.reflect.Array#newInstance(Class<?>,int)"
"java.lang.reflect.Array#set(java.lang.Object,int,java.lang.Object)"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])"
"java.lang.reflect.Field#get(java.lang.Object)"
"java.lang.reflect.Field#set(java.lang.Object,java.lang.Object)"
"java.lang.reflect.Field#setBoolean(java.lang.Object,boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])"
"java.lang.reflect.Proxy#getProxyClass(java.lang.ClassLoader,Class<?>[])"
"java.lang.reflect.Proxy#newProxyInstance(java.lang.ClassLoader,Class<?>[],java.lang.reflect.InvocationHandler)"
"java.net.DatagramSocket#bind(java.net.SocketAddress)"
"java.net.DatagramSocket#receive(java.net.DatagramPacket)"
"java.net.DatagramSocket#send(java.net.DatagramPacket)"
"java.net.DatagramSocket#setReceiveBufferSize(int)"
"java.net.DatagramSocket#setReuseAddress(boolean)"
"java.net.DatagramSocket#setSendBufferSize(int)"
"java.net.DatagramSocket#setSoTimeout(int)"
"java.net.DatagramSocket#setTrafficClass(int)"
"java.net.HttpURLConnection#setRequestMethod(java.lang.String)"
"java.net.InetAddress#getByAddress(byte[])"
"java.net.InetAddress#getByName(java.lang.String)"
"java.net.InetAddress#getLocalHost()"
"java.net.JarURLConnection#getJarEntry()"
"java.net.JarURLConnection#getJarFile()"
"java.net.MulticastSocket#MulticastSocket(int)"
"java.net.MulticastSocket#MulticastSocket(java.net.SocketAddress)"
"java.net.MulticastSocket#joinGroup(java.net.InetAddress)"
"java.net.MulticastSocket#leaveGroup(java.net.InetAddress)"
"java.net.MulticastSocket#setInterface(java.net.InetAddress)"
"java.net.MulticastSocket#setLoopbackMode(boolean)"
"java.net.MulticastSocket#setTimeToLive(int)"
"java.net.ServerSocket#ServerSocket()"
"java.net.ServerSocket#ServerSocket(int)"
"java.net.ServerSocket#ServerSocket(int,int)"
"java.net.ServerSocket#ServerSocket(int,int,java.net.InetAddress)"
"java.net.ServerSocket#accept()"
"java.net.ServerSocket#bind(java.net.SocketAddress)"
"java.net.ServerSocket#bind(java.net.SocketAddress,int)"
"java.net.ServerSocket#close()"
"java.net.ServerSocket#setReceiveBufferSize(int)"
"java.net.ServerSocket#setReuseAddress(boolean)"
"java.net.ServerSocket#setSoTimeout(int)"
"java.net.Socket#Socket(java.lang.String,int)"
"java.net.Socket#Socket(java.net.InetAddress,int)"
"java.net.Socket#bind(java.net.SocketAddress)"
"java.net.Socket#close()"
"java.net.Socket#connect(java.net.SocketAddress)"
"java.net.Socket#connect(java.net.SocketAddress,int)"
"java.net.Socket#getInputStream()"
"java.net.Socket#getOutputStream()"
"java.net.Socket#getReceiveBufferSize()"
"java.net.Socket#getSoTimeout()"
"java.net.Socket#setKeepAlive(boolean)"
"java.net.Socket#setOOBInline(boolean)"
"java.net.Socket#setReceiveBufferSize(int)"
"java.net.Socket#setReuseAddress(boolean)"
"java.net.Socket#setSendBufferSize(int)"
"java.net.Socket#setSoLinger(boolean,int)"
"java.net.Socket#setSoTimeout(int)"
"java.net.Socket#setTcpNoDelay(boolean)"
"java.net.Socket#setTrafficClass(int)"
"java.net.URI#URI(java.lang.String)"
"java.net.URI#URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"
"java.net.URI#toURL()"
"java.net.URL#URL(java.lang.String)"
"java.net.URL#URL(java.lang.String,java.lang.String,java.lang.String)"
"java.net.URL#URL(java.net.URL,java.lang.String)"
"java.net.URL#URL(java.net.URL,java.lang.String,java.net.URLStreamHandler)"
"java.net.URL#openConnection()"
"java.net.URL#openStream()"
"java.net.URL#toURI()"
"java.net.URLClassLoader#definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)"
"java.net.URLClassLoader#findClass(java.lang.String)"
"java.net.URLConnection#connect()"
"java.net.URLConnection#getInputStream()"
"java.net.URLConnection#getOutputStream()"
"java.net.URLDecoder#decode(java.lang.String,java.lang.String)"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)"
"java.nio.channels.AsynchronousChannel#close()"
"java.nio.channels.AsynchronousChannelGroup#withCachedThreadPool(java.util.concurrent.ExecutorService,int)"
"java.nio.channels.AsynchronousSocketChannel#open(java.nio.channels.AsynchronousChannelGroup)"
"java.nio.channels.DatagramChannel#connect(java.net.SocketAddress)"
"java.nio.channels.DatagramChannel#open()"
"java.nio.channels.DatagramChannel#read(java.nio.ByteBuffer)"
"java.nio.channels.DatagramChannel#receive(java.nio.ByteBuffer)"
"java.nio.channels.DatagramChannel#send(java.nio.ByteBuffer,java.net.SocketAddress)"
"java.nio.channels.DatagramChannel#write(java.nio.ByteBuffer)"
"java.nio.channels.FileChannel#size()"
"java.nio.channels.FileChannel#transferTo(long,long,java.nio.channels.WritableByteChannel)"
"java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)"
"java.nio.channels.SelectableChannel#configureBlocking(boolean)"
"java.nio.channels.SelectableChannel#register(java.nio.channels.Selector,int)"
"java.nio.channels.SelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)"
"java.nio.channels.Selector#close()"
"java.nio.channels.Selector#open()"
"java.nio.channels.Selector#select(long)"
"java.nio.channels.Selector#selectNow()"
"java.nio.channels.ServerSocketChannel#accept()"
"java.nio.channels.ServerSocketChannel#open()"
"java.nio.channels.SocketChannel#connect(java.net.SocketAddress)"
"java.nio.channels.SocketChannel#finishConnect()"
"java.nio.channels.SocketChannel#open()"
"java.nio.channels.SocketChannel#read(java.nio.ByteBuffer)"
"java.nio.channels.SocketChannel#write(java.nio.ByteBuffer)"
"java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()"
"java.nio.channels.spi.AbstractSelectableChannel#configureBlocking(boolean)"
"java.nio.channels.spi.AbstractSelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)"
"java.nio.charset.CoderResult#throwException()"
"java.rmi.registry.LocateRegistry#createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)"
"java.rmi.registry.Registry#bind(java.lang.String,java.rmi.Remote)"
"java.rmi.server.RMIClientSocketFactory#createSocket(java.lang.String,int)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)"
"java.security.KeyStore#getInstance(java.lang.String)"
"java.security.KeyStore#getInstance(java.lang.String,java.lang.String)"
"java.security.KeyStore#isKeyEntry(java.lang.String)"
"java.security.KeyStore#load(java.io.InputStream,char[])"
"java.security.MessageDigest#clone()"
"java.security.MessageDigest#getInstance(java.lang.String)"
"java.security.SecureRandom#getInstance(java.lang.String)"
"java.security.SecureRandom#getInstance(java.lang.String,java.lang.String)"
"java.security.cert.CertStore#getInstance(java.lang.String,java.security.cert.CertStoreParameters)"
"java.security.cert.Certificate#getEncoded()"
"java.security.cert.CertificateFactory#generateCRLs(java.io.InputStream)"
"java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String,java.lang.String)"
"java.security.cert.PKIXBuilderParameters#PKIXBuilderParameters(java.security.KeyStore,java.security.cert.CertSelector)"
"java.security.cert.X509Certificate#checkValidity()"
"java.sql.Connection#close()"
"java.sql.Connection#commit()"
"java.sql.Connection#getAutoCommit()"
"java.sql.Connection#isClosed()"
"java.sql.Connection#prepareStatement(java.lang.String)"
"java.sql.Connection#setAutoCommit(boolean)"
"java.sql.Driver#connect(java.lang.String,java.util.Properties)"
"java.sql.DriverManager#deregisterDriver(java.sql.Driver)"
"java.sql.PreparedStatement#execute()"
"java.sql.PreparedStatement#executeQuery()"
"java.sql.PreparedStatement#executeUpdate()"
"java.sql.PreparedStatement#setBinaryStream(int,java.io.InputStream,int)"
"java.sql.PreparedStatement#setInt(int,int)"
"java.sql.PreparedStatement#setLong(int,long)"
"java.sql.PreparedStatement#setNull(int,int)"
"java.sql.PreparedStatement#setString(int,java.lang.String)"
"java.sql.PreparedStatement#setTimestamp(int,java.sql.Timestamp)"
"java.sql.ResultSet#close()"
"java.sql.ResultSet#getBinaryStream(int)"
"java.sql.ResultSet#getInt(int)"
"java.sql.ResultSet#getString(int)"
"java.sql.ResultSet#next()"
"java.sql.Statement#close()"
"java.text.DateFormat#parse(java.lang.String)"
"java.util.Properties#load(java.io.InputStream)"
"java.util.concurrent.CountDownLatch#await()"
"java.util.concurrent.CountDownLatch#await(long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.ExecutorService#awaitTermination(long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.Future#get()"
"java.util.concurrent.Future#get(long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.LinkedBlockingDeque#offer(E,long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.LinkedBlockingDeque#poll(long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.Semaphore#acquire()"
"java.util.concurrent.ThreadPoolExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.TimeUnit#sleep(long)"
"java.util.concurrent.locks.AbstractQueuedSynchronizer#acquireSharedInterruptibly(int)"
"java.util.jar.JarFile#JarFile(java.io.File)"
"java.util.jar.JarFile#getInputStream(java.util.zip.ZipEntry)"
"java.util.jar.JarFile#getManifest()"
"java.util.jar.JarInputStream#JarInputStream(java.io.InputStream)"
"java.util.jar.JarInputStream#getNextJarEntry()"
"java.util.jar.Manifest#Manifest(java.io.InputStream)"
"java.util.logging.Handler#close()"
"java.util.logging.Handler#setEncoding(java.lang.String)"
"java.util.logging.Handler#setFilter(java.util.logging.Filter)"
"java.util.logging.Handler#setFormatter(java.util.logging.Formatter)"
"java.util.logging.Handler#setLevel(java.util.logging.Level)"
"java.util.logging.Level#parse(java.lang.String)"
"java.util.logging.LogManager#checkAccess()"
"java.util.logging.Logger#addHandler(java.util.logging.Handler)"
"java.util.logging.Logger#removeHandler(java.util.logging.Handler)"
"java.util.logging.Logger#setLevel(java.util.logging.Level)"
"java.util.zip.DeflaterOutputStream#close()"
"java.util.zip.DeflaterOutputStream#flush()"
"java.util.zip.GZIPInputStream#GZIPInputStream(java.io.InputStream)"
"java.util.zip.GZIPOutputStream#GZIPOutputStream(java.io.OutputStream)"
"java.util.zip.GZIPOutputStream#finish()"
"java.util.zip.GZIPOutputStream#write(byte[],int,int)"
"java.util.zip.Inflater#inflate(byte[],int,int)"
"java.util.zip.ZipFile#ZipFile(java.io.File)"
"java.util.zip.ZipFile#close()"
"java.util.zip.ZipFile#getInputStream(java.util.zip.ZipEntry)"
"java.util.zip.ZipInputStream#close()"
"java.lang.reflect.Proxy#newProxyInstance(java.lang.ClassLoader,Class<?>[],java.lang.reflect.InvocationHandler)" -> "org.apache.naming.factory.webservices.ServiceRefFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.util.concurrent.Future#get()" -> "org.apache.catalina.core.ContainerBase#stopInternal()"
"java.util.concurrent.Future#get()" -> "org.apache.catalina.startup.HostConfig#deployDescriptors(java.io.File,java.lang.String[])"
"java.util.concurrent.Future#get()" -> "org.apache.catalina.startup.HostConfig#deployWARs(java.io.File,java.lang.String[])"
"java.util.concurrent.Future#get()" -> "org.apache.catalina.startup.HostConfig#deployDirectories(java.io.File,java.lang.String[])"
"java.util.concurrent.Future#get()" -> "org.apache.catalina.startup.UserConfig#deploy()"
"java.util.concurrent.Future#get()" -> "org.apache.tomcat.websocket.WriteTask#run()"
"java.util.concurrent.Future#get()" -> "org.apache.tomcat.websocket.ReadTask#run()"
"java.util.concurrent.Future#get()" -> "org.apache.tomcat.websocket.WebSocketSslHandshakeThread#run()"
"java.util.concurrent.Future#get()" -> "org.apache.tomcat.websocket.LongToIntegerFuture#get()"
"java.util.concurrent.Future#get()" -> "org.apache.tomcat.websocket.WsRemoteEndpointImplBase#sendObject(java.lang.Object)"
"java.lang.Class#newInstance()" -> "javax.el.ExpressionFactory#newInstance(java.util.Properties)"
"java.lang.Class#newInstance()" -> "javax.websocket.ContainerProvider#getWebSocketContainer()"
"java.lang.Class#newInstance()" -> "javax.websocket.server.Configurator#loadDefault()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.connector.Connector#Connector(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.core.DefaultInstanceManager#newInstance(Class<?>)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.core.DefaultInstanceManager#newInstance(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.core.DefaultInstanceManager#newInstance(java.lang.String,java.lang.ClassLoader)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.core.StandardContext#getCharsetMapper()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.core.StandardContext#createWrapper()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.core.StandardHost#startInternal()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.filters.CsrfPreventionFilterBase#init(javax.servlet.FilterConfig)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.ha.session.ClusterManagerBase#clone(org.apache.catalina.ha.session.ClusterManagerBase)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesJdbc()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.mbeans.ContainerMBean#addChild(java.lang.String,java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.mbeans.ContainerMBean#addValve(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.mbeans.ContainerMBean#addLifeCycleListener(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.mbeans.MBeanFactory#createValve(java.lang.String,java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.mbeans.ServiceMBean#addExecutor(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.realm.JDBCRealm#open()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.realm.JNDIRealm#constructInstance(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.realm.RealmBase#createUsernameRetriever(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.security.SecurityClassLoad#loadCoyotePackage(java.lang.ClassLoader)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.security.SecurityClassLoad#loadTomcatPackage(java.lang.ClassLoader)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.session.JDBCStore#open()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.session.ManagerBase#getSessionIdGenerator()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.Bootstrap#init()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.ContextConfig#authenticatorConfig()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.HostConfig#deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.HostConfig#deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.LifecycleListenerRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.ExistingStandardWrapper#loadServlet()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.UserConfig#deploy()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.UserConfig#deploy(java.lang.String,java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.startup.WebappServiceLoader#loadServices(Class<T>,LinkedHashSet<java.lang.String>)"
"java.lang.Class#newInstance()" -> "org.apache.catalina.tribes.group.GroupChannel#setupDefaultStack()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.util.SessionIdGeneratorBase#createSecureRandom()"
"java.lang.Class#newInstance()" -> "org.apache.catalina.valves.JDBCAccessLogValve#open()"
"java.lang.Class#newInstance()" -> "org.apache.jasper.JspCompilationContext#createCompiler(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.jasper.runtime.JspRuntimeLibrary#getValueFromBeanInfoPropertyEditor(Class<?>,java.lang.String,java.lang.String,Class<?>)"
"java.lang.Class#newInstance()" -> "org.apache.jasper.runtime.PerThreadTagHandlerPool#get(Class<? extends javax.servlet.jsp.tagext.Tag>)"
"java.lang.Class#newInstance()" -> "org.apache.jasper.runtime.TagHandlerPool#getTagHandlerPool(javax.servlet.ServletConfig)"
"java.lang.Class#newInstance()" -> "org.apache.jasper.runtime.TagHandlerPool#get(Class<? extends javax.servlet.jsp.tagext.Tag>)"
"java.lang.Class#newInstance()" -> "org.apache.jasper.servlet.JspServletWrapper#getDependants()"
"java.lang.Class#newInstance()" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.io.InputStream,java.lang.ClassLoader)"
"java.lang.Class#newInstance()" -> "org.apache.juli.FileHandler#configure()"
"java.lang.Class#newInstance()" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#newInstance()" -> "org.apache.naming.factory.EjbFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#newInstance()" -> "org.apache.naming.factory.ResourceEnvFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#newInstance()" -> "org.apache.naming.factory.ResourceFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#newInstance()" -> "org.apache.naming.factory.TransactionFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#newInstance()" -> "org.apache.naming.resources.ProxyDirContext#ProxyDirContext(Hashtable<java.lang.String,java.lang.String>,javax.naming.directory.DirContext)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.util.digester.FactoryCreateRule#getFactory(org.xml.sax.Attributes)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.util.digester.ObjectCreateRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.util.modeler.ManagedBean#createMBean(java.lang.Object)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.util.modeler.Registry#getModelerSource(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getTrustManagers(java.lang.String,java.lang.String,java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.util.net.SSLImplementation#getInstance(java.lang.String)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.pojo.PojoMessageHandlerWholeBinary#PojoMessageHandlerWholeBinary(java.lang.Object,java.lang.reflect.Method,javax.websocket.Session,javax.websocket.EndpointConfig,List<Class<? extends javax.websocket.Decoder>>,java.lang.Object[],int,boolean,int,boolean,long)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.pojo.PojoMessageHandlerWholeText#PojoMessageHandlerWholeText(java.lang.Object,java.lang.reflect.Method,javax.websocket.Session,javax.websocket.EndpointConfig,List<Class<? extends javax.websocket.Decoder>>,java.lang.Object[],int,boolean,int,long)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.server.DefaultServerEndpointConfigurator#getEndpointInstance(Class<T>)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.server.WsSci#onStartup(Set<Class<?>>,javax.servlet.ServletContext)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.server.WsServerContainer#addEndpoint(Class<?>)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.server.WsServerContainer#validateEncoders(Class<? extends javax.websocket.Encoder>[])"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.Util#getDecoders(List<Class<? extends javax.websocket.Decoder>>)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.WsRemoteEndpointImplBase#setEncoders(javax.websocket.EndpointConfig)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.WsWebSocketContainer#connectToServer(java.lang.Object,java.net.URI)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.WsWebSocketContainer#connectToServer(Class<?>,java.net.URI)"
"java.lang.Class#newInstance()" -> "org.apache.tomcat.websocket.WsWebSocketContainer#connectToServer(Class<? extends javax.websocket.Endpoint>,javax.websocket.ClientEndpointConfig,java.net.URI)"
"java.net.Socket#setKeepAlive(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setKeepAlive(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setKeepAlive(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setKeepAlive(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setKeepAlive(boolean)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.io.FileInputStream#close()" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.io.FileInputStream#close()" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#copy(java.io.File,java.io.File)"
"java.io.FileInputStream#close()" -> "org.apache.catalina.ha.deploy.FileMessageFactory#cleanup()"
"java.io.FileInputStream#close()" -> "org.apache.catalina.manager.ManagerServlet#copyInternal(java.io.File,java.io.File,byte[])"
"java.io.FileInputStream#close()" -> "org.apache.catalina.servlets.DefaultServlet#findXsltInputStream(javax.naming.directory.DirContext)"
"java.io.FileInputStream#close()" -> "org.apache.catalina.session.FileStore#load(java.lang.String)"
"java.io.FileInputStream#close()" -> "org.apache.catalina.session.StandardManager#doLoad()"
"java.io.FileInputStream#close()" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.io.FileInputStream#close()" -> "org.apache.catalina.startup.ContextConfig#processAnnotationsFile(java.io.File,org.apache.catalina.deploy.WebXml,boolean)"
"java.io.FileInputStream#close()" -> "org.apache.catalina.startup.HostConfig#deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FileInputStream#close()" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.FileInputStream#close()" -> "org.apache.jasper.JspC#openWebxmlReader(java.io.File)"
"java.io.ByteArrayOutputStream#toString(java.lang.String)" -> "org.apache.jasper.tagplugins.jstl.ImportResponseWrapper#getString()"
"java.io.ByteArrayOutputStream#toString(java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.MultipartStream#readHeaders()"
"java.io.ByteArrayOutputStream#toString(java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.util.Streams#asString(java.io.InputStream,java.lang.String)"
"java.util.zip.GZIPInputStream#GZIPInputStream(java.io.InputStream)" -> "org.apache.catalina.tribes.group.interceptors.GzipInterceptor#decompress(byte[])"
"java.lang.reflect.Proxy#getProxyClass(java.lang.ClassLoader,Class<?>[])" -> "org.apache.catalina.tribes.io.ReplicationStream#resolveProxyClass(java.lang.String[])"
"java.lang.reflect.Proxy#getProxyClass(java.lang.ClassLoader,Class<?>[])" -> "org.apache.catalina.util.CustomObjectInputStream#resolveProxyClass(java.lang.String[])"
"java.lang.reflect.Proxy#getProxyClass(java.lang.ClassLoader,Class<?>[])" -> "org.apache.naming.factory.DataSourceLinkFactory#wrapDataSource(java.lang.Object,java.lang.String,java.lang.String)"
"java.nio.channels.SelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#registerChannel(java.nio.channels.Selector,java.nio.channels.SelectableChannel,int,java.lang.Object)"
"java.sql.PreparedStatement#setTimestamp(int,java.sql.Timestamp)" -> "org.apache.catalina.valves.JDBCAccessLogValve#log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
"java.io.ObjectOutputStream#writeBoolean(boolean)" -> "org.apache.catalina.authenticator.SingleSignOnEntry#writeObject(java.io.ObjectOutputStream)"
"java.net.URL#URL(java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#addToolsJar(Vector<java.net.URL>)"
"java.net.URL#URL(java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#getURL(java.lang.String,java.lang.String)"
"java.net.URL#URL(java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#addJarsFromClassPath(Vector<java.net.URL>,java.lang.String)"
"java.io.File#createTempFile(java.lang.String,java.lang.String,java.io.File)" -> "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream#thresholdReached()"
"java.beans.PropertyEditor#setAsText(java.lang.String)" -> "org.apache.el.lang.ELSupport#coerceToType(java.lang.Object,Class<?>)"
"java.beans.PropertyEditor#setAsText(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#getValueFromBeanInfoPropertyEditor(Class<?>,java.lang.String,java.lang.String,Class<?>)"
"java.beans.PropertyEditor#setAsText(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#getValueFromPropertyEditorManager(Class<?>,java.lang.String,java.lang.String)"
"java.net.Socket#close()" -> "org.apache.catalina.core.StandardServer#await()"
"java.net.Socket#close()" -> "org.apache.catalina.ha.backend.TcpSender#close(int)"
"java.net.Socket#close()" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.net.Socket#close()" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.net.Socket#close()" -> "org.apache.catalina.tribes.transport.bio.BioReplicationTask#run()"
"java.net.Socket#close()" -> "org.apache.catalina.tribes.transport.bio.BioReplicationTask#close()"
"java.net.Socket#close()" -> "org.apache.catalina.tribes.transport.bio.BioSender#closeSocket()"
"java.net.Socket#close()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#cancelledKey(java.nio.channels.SelectionKey)"
"java.net.Socket#close()" -> "org.apache.catalina.tribes.transport.nio.NioSender#disconnect()"
"java.net.Socket#close()" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.net.Socket#close()" -> "org.apache.tomcat.util.net.JIoEndpoint#closeSocket(java.net.Socket)"
"java.net.Socket#close()" -> "org.apache.tomcat.util.net.SocketProcessor#run()"
"java.net.Socket#close()" -> "org.apache.tomcat.util.net.jsse.JSSESupport#handShake()"
"java.net.Socket#close()" -> "org.apache.tomcat.util.net.NioChannel#close()"
"java.net.Socket#close()" -> "org.apache.tomcat.util.net.NioEndpoint#closeSocket(java.nio.channels.SocketChannel)"
"java.net.Socket#close()" -> "org.apache.tomcat.util.net.SecureNioChannel#close(boolean)"
"java.io.ObjectInputStream#readUTF()" -> "org.apache.catalina.ha.session.DeltaManager#deserializeSessionId(byte[])"
"java.io.FileOutputStream#write(byte[])" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#write(java.io.File)"
"java.security.cert.X509Certificate#checkValidity()" -> "org.apache.catalina.realm.RealmBase#authenticate(java.security.cert.X509Certificate[])"
"java.lang.Class#getConstructor(Class<?>[])" -> "javax.el.ExpressionFactory#newInstance(java.util.Properties)"
"java.lang.Class#getConstructor(Class<?>[])" -> "javax.el.Util#getConstructor(Class<?>,Constructor<?>)"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.catalina.core.NamingContextListener#constructEnvEntry(java.lang.String,java.lang.String)"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.catalina.loader.WebappLoader#createClassLoader()"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.catalina.realm.JAASRealm#getConfig()"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.catalina.startup.Catalina#addClusterRuleSet(org.apache.tomcat.util.digester.Digester,java.lang.String)"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.catalina.startup.Tomcat#createContext(org.apache.catalina.Host,java.lang.String)"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.jasper.servlet.JspServlet#init(javax.servlet.ServletConfig)"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.naming.factory.DataSourceLinkFactory#wrapDataSource(java.lang.Object,java.lang.String,java.lang.String)"
"java.lang.Class#getConstructor(Class<?>[])" -> "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource#isBeanCompatible(Class<?>)"
"java.net.URLDecoder#decode(java.lang.String,java.lang.String)" -> "org.apache.catalina.core.ApplicationContext#getRequestDispatcher(java.lang.String)"
"java.net.URLDecoder#decode(java.lang.String,java.lang.String)" -> "org.apache.catalina.loader.WebappLoader#utf8Decode(java.lang.String)"
"java.net.URLDecoder#decode(java.lang.String,java.lang.String)" -> "org.apache.catalina.servlets.CGIEnvironment#setupFromRequest(javax.servlet.http.HttpServletRequest)"
"java.net.URLDecoder#decode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ssi.SSIServletExternalResolver#getCGIVariable(java.lang.String)"
"java.lang.reflect.Field#set(java.lang.Object,java.lang.Object)" -> "org.apache.catalina.core.DefaultInstanceManager#lookupFieldResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Field,java.lang.String,Class<?>)"
"java.lang.reflect.Field#set(java.lang.Object,java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStaticFinal()"
"java.lang.reflect.Field#set(java.lang.Object,java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#nullInstance(java.lang.Object)"
"java.sql.Connection#commit()" -> "org.apache.catalina.realm.DataSourceRealm#close(java.sql.Connection)"
"java.sql.Connection#commit()" -> "org.apache.catalina.realm.JDBCRealm#getPassword(java.lang.String)"
"java.sql.Connection#commit()" -> "org.apache.catalina.realm.JDBCRealm#getRoles(java.lang.String)"
"java.sql.Connection#commit()" -> "org.apache.catalina.session.JDBCStore#close(java.sql.Connection)"
"java.sql.Connection#commit()" -> "org.apache.catalina.session.JDBCStore#stopInternal()"
"java.io.InputStream#read()" -> "examples.ShowSource#doEndTag()"
"java.io.InputStream#read()" -> "javax.servlet.ServletInputStream#readLine(byte[],int,int)"
"java.io.InputStream#read()" -> "org.apache.catalina.core.StandardServer#await()"
"java.io.InputStream#read()" -> "org.apache.catalina.servlets.HTTPHeaderInputStream#read()"
"java.io.InputStream#read()" -> "org.apache.catalina.tribes.transport.bio.BioSender#waitForAck()"
"java.io.InputStream#read()" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#read()"
"java.io.InputStream#read()" -> "org.apache.jasper.xmlparser.ASCIIReader#read()"
"java.io.InputStream#read()" -> "org.apache.jasper.xmlparser.UCSReader#read()"
"java.io.InputStream#read()" -> "org.apache.jasper.xmlparser.UCSReader#read(char[],int,int)"
"java.io.InputStream#read()" -> "org.apache.jasper.xmlparser.UTF8Reader#read()"
"java.io.InputStream#read()" -> "org.apache.jasper.xmlparser.UTF8Reader#read(char[],int,int)"
"java.io.InputStream#read()" -> "org.apache.jasper.xmlparser.XMLEncodingDetector#createInitialReader()"
"java.io.InputStream#read()" -> "org.apache.jasper.xmlparser.RewindableInputStream#read()"
"java.io.InputStream#read()" -> "validators.DebugValidator#validate(java.lang.String,java.lang.String,javax.servlet.jsp.tagext.PageData)"
"java.io.InputStream#read()" -> "websocket.tc7.echo.EchoStreamInbound#onBinaryData(java.io.InputStream)"
"java.rmi.registry.Registry#bind(java.lang.String,java.rmi.Remote)" -> "org.apache.catalina.mbeans.JmxRemoteLifecycleListener#createServer(java.lang.String,java.lang.String,int,int,HashMap<java.lang.String,java.lang.Object>,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)"
"java.util.logging.LogManager#checkAccess()" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration()"
"java.util.logging.LogManager#checkAccess()" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.io.InputStream)"
"java.nio.channels.DatagramChannel#receive(java.nio.ByteBuffer)" -> "org.apache.catalina.tribes.transport.nio.NioReplicationTask#drainChannel(java.nio.channels.SelectionKey,org.apache.catalina.tribes.io.ObjectReader)"
"java.lang.Byte#valueOf(java.lang.String)" -> "org.apache.el.lang.ELSupport#coerceToNumber(java.lang.String,Class<?>)"
"java.lang.Byte#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#convert(java.lang.String,java.lang.String,Class<?>,Class<?>)"
"java.lang.Byte#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Byte#valueOf(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Byte#valueOf(java.lang.String)" -> "org.apache.tomcat.websocket.Util#coerceToType(Class<?>,java.lang.String)"
"java.util.concurrent.LinkedBlockingDeque#poll(long,java.util.concurrent.TimeUnit)" -> "org.apache.juli.LoggerThread#run()"
"java.net.Socket#connect(java.net.SocketAddress,int)" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.net.Socket#connect(java.net.SocketAddress,int)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#connect(java.net.SocketAddress,int)" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.net.ServerSocket#ServerSocket()" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#bind()"
"java.io.OutputStreamWriter#flush()" -> "org.apache.catalina.servlets.DefaultServlet#renderXml(java.lang.String,org.apache.naming.resources.CacheEntry,javax.xml.transform.Source)"
"java.io.OutputStreamWriter#flush()" -> "org.apache.catalina.util.URLEncoder#encode(java.lang.String,java.lang.String)"
"java.io.OutputStreamWriter#flush()" -> "org.apache.jasper.runtime.JspRuntimeLibrary#URLEncode(java.lang.String,java.lang.String)"
"java.io.OutputStreamWriter#flush()" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.io.DataInput#skipBytes(int)" -> "org.apache.tomcat.util.bcel.classfile.Utility#skipFully(java.io.DataInput,int)"
"java.io.FileInputStream#read(byte[])" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#copy(java.io.File,java.io.File)"
"java.io.FileInputStream#read(byte[])" -> "org.apache.catalina.ha.deploy.FileMessageFactory#readMessage(org.apache.catalina.ha.deploy.FileMessage)"
"java.io.FileInputStream#read(byte[])" -> "org.apache.catalina.manager.ManagerServlet#copyInternal(java.io.File,java.io.File,byte[])"
"java.io.FileInputStream#read(byte[])" -> "org.apache.catalina.servlets.DefaultServlet#findXsltInputStream(javax.naming.directory.DirContext)"
"java.io.FileInputStream#read(byte[])" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "javax.el.ExpressionFactory#newInstance(java.util.Properties)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.core.DefaultInstanceManager#newInstance(java.lang.String,java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.core.DefaultInstanceManager#loadClass(java.lang.String,java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.core.StandardWrapper#servletSecurityAnnotationScan()"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.core.StandardWrapper#isContainerProvidedServlet(java.lang.String)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#loadClass(java.lang.String,boolean)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#validateJarFile(java.io.File)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadCorePackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadLoaderPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadRealmPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadServletsPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadSessionPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadUtilPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadValvesPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadCoyotePackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadJavaxPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadConnectorPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.security.SecurityClassLoad#loadTomcatPackage(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.startup.Bootstrap#init()"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.startup.Tool#main(java.lang.String[])"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.util.CustomObjectInputStream#resolveProxyClass(java.lang.String[])"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.catalina.util.Introspection#loadClass(org.apache.catalina.Container,java.lang.String)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.jasper.JspCompilationContext#load()"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.jasper.security.SecurityClassLoad#securityClassLoad(java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.jasper.servlet.JasperLoader#loadClass(java.lang.String,boolean)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.jasper.servlet.JspServlet#init(javax.servlet.ServletConfig)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.io.InputStream,java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.juli.FileHandler#configure()"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.naming.factory.EjbFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.naming.factory.ResourceEnvFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.naming.factory.ResourceFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.naming.factory.TransactionFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.naming.factory.webservices.ServiceRefFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.tomcat.util.digester.CallMethodRule#setDigester(org.apache.tomcat.util.digester.Digester)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.tomcat.util.digester.FactoryCreateRule#getFactory(org.xml.sax.Attributes)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.tomcat.util.digester.ObjectCreateRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#callMethod1(java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.ClassLoader)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.tomcat.util.modeler.BaseModelMBean#getAttributeClass(java.lang.String)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.tomcat.util.modeler.ManagedBean#createMBean(java.lang.Object)"
"java.lang.ClassLoader#loadClass(java.lang.String)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getTrustManagers(java.lang.String,java.lang.String,java.lang.String)"
"java.io.ObjectOutputStream#writeUTF(java.lang.String)" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessionId(java.lang.String)"
"java.security.cert.CertificateFactory#generateCRLs(java.io.InputStream)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getCRLs(java.lang.String)"
"java.sql.PreparedStatement#setBinaryStream(int,java.io.InputStream,int)" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.security.SecureRandom#getInstance(java.lang.String,java.lang.String)" -> "org.apache.catalina.util.SessionIdGeneratorBase#createSecureRandom()"
"java.io.StringReader#read()" -> "org.apache.catalina.valves.PatternTokenizer#getToken()"
"java.io.StringReader#read()" -> "org.apache.catalina.valves.PatternTokenizer#getParameter()"
"java.io.StringReader#read()" -> "org.apache.catalina.valves.PatternTokenizer#getWhiteSpaces()"
"java.io.StringReader#read()" -> "org.apache.catalina.valves.PatternTokenizer#getRemains()"
"java.io.StringReader#read()" -> "org.apache.tomcat.util.http.parser.HttpParser#skipLws(java.io.StringReader,boolean)"
"java.io.StringReader#read()" -> "org.apache.tomcat.util.http.parser.HttpParser#skipConstant(java.io.StringReader,java.lang.String)"
"java.io.StringReader#read()" -> "org.apache.tomcat.util.http.parser.HttpParser#readToken(java.io.StringReader)"
"java.io.StringReader#read()" -> "org.apache.tomcat.util.http.parser.HttpParser#readQuotedString(java.io.StringReader,boolean)"
"java.io.StringReader#read()" -> "org.apache.tomcat.util.http.parser.HttpParser#readQuotedToken(java.io.StringReader)"
"java.io.StringReader#read()" -> "org.apache.tomcat.util.http.parser.HttpParser#readLhex(java.io.StringReader)"
"java.net.ServerSocket#ServerSocket(int,int,java.net.InetAddress)" -> "org.apache.catalina.core.StandardServer#await()"
"java.net.ServerSocket#ServerSocket(int,int,java.net.InetAddress)" -> "org.apache.catalina.mbeans.RmiServerBindSocketFactory#createServerSocket(int)"
"java.net.ServerSocket#ServerSocket(int,int,java.net.InetAddress)" -> "org.apache.tomcat.util.net.DefaultServerSocketFactory#createSocket(int,int,java.net.InetAddress)"
"java.net.JarURLConnection#getJarEntry()" -> "org.apache.jasper.JspCompilationContext#getJspLastModified()"
"java.net.JarURLConnection#getJarEntry()" -> "org.apache.jasper.JspCompilationContext#getLastModified(java.lang.String)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "javax.el.Util#getMethod(Class<?>,java.lang.reflect.Method)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core.ApplicationContextFacade#invokeMethod(org.apache.catalina.core.ApplicationContext,java.lang.String,java.lang.Object[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core.ApplicationContextFacade#doPrivileged(java.lang.String,Class<?>[],java.lang.Object[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core.AprLifecycleListener#terminateAPR()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core.AprLifecycleListener#initializeSSL()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core.JreMemoryLeakPreventionListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.deploy.NamingResources#cleanUp(java.lang.Object,java.lang.String,java.lang.String)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesJdbc()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.loader.WebappLoader#getClasspath(java.lang.ClassLoader)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.manager.StatusTransformer#writeOSState(java.io.PrintWriter,int)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.manager.util.SessionUtils#guessLocaleFromSession(javax.servlet.http.HttpSession)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.security.SecurityUtil#createMethodAndCacheIt(java.lang.reflect.Method[],Class<?>,java.lang.String,Class<?>[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#init()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#load(java.lang.String[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#getServer()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#start()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#stop()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#stopServer()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#stopServer(java.lang.String[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#setAwait(boolean)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Bootstrap#getAwait()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.CopyParentClassLoaderRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.Tool#main(java.lang.String[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.startup.SetPublicIdRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.el.lang.Function#getMethod()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.el.util.ReflectionUtil#getMethod(Class<?>,java.lang.reflect.Method)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.jasper.runtime.ProtectedFunctionMapper#mapFunction(java.lang.String,Class<?>,java.lang.String,Class<?>[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.jasper.runtime.ProtectedFunctionMapper#getMapForFunction(java.lang.String,Class<?>,java.lang.String,Class<?>[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.naming.factory.DataSourceHandler#DataSourceHandler(javax.sql.DataSource,java.lang.String,java.lang.String)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.naming.factory.webservices.ServiceRefFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.tomcat.util.digester.XercesParser#getXercesVersion()"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.tomcat.util.IntrospectionUtils#callMain(Class<?>,java.lang.String[])"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.tomcat.util.modeler.ManagedBean#getGetter(java.lang.String,org.apache.tomcat.util.modeler.BaseModelMBean,java.lang.Object)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.tomcat.util.modeler.ManagedBean#getSetter(java.lang.String,org.apache.tomcat.util.modeler.BaseModelMBean,java.lang.Object)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.tomcat.util.modeler.ManagedBean#getInvoke(java.lang.String,java.lang.Object[],java.lang.String[],org.apache.tomcat.util.modeler.BaseModelMBean,java.lang.Object)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.tomcat.websocket.Util#getOnMessageMethod(javax.websocket.MessageHandler)"
"java.lang.Class#getMethod(java.lang.String,Class<?>[])" -> "org.apache.tomcat.websocket.Util#getOnMessagePartialMethod(javax.websocket.MessageHandler)"
"java.io.BufferedWriter#flush()" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.net.MulticastSocket#leaveGroup(java.net.InetAddress)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#stop(int)"
"java.net.Socket#bind(java.net.SocketAddress)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.io.FileReader#FileReader(java.io.File)" -> "async.Async0#bar()"
"java.io.FileReader#FileReader(java.io.File)" -> "org.apache.tomcat.buildutil.Txt2Html#convert(java.io.File,java.io.File)"
"java.io.BufferedReader#close()" -> "javax.el.ExpressionFactory#getClassNameServices(java.lang.ClassLoader)"
"java.io.BufferedReader#close()" -> "org.apache.catalina.core.StandardContext#getDeploymentDescriptor()"
"java.io.BufferedReader#close()" -> "org.apache.catalina.ha.backend.TcpSender#close(int)"
"java.io.BufferedReader#close()" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.io.BufferedReader#close()" -> "org.apache.catalina.servlets.CGIRunner#sendToLog(java.io.BufferedReader)"
"java.io.BufferedReader#close()" -> "org.apache.catalina.ssi.SSIServlet#processSSI(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.net.URL)"
"java.io.BufferedReader#close()" -> "org.apache.catalina.startup.PasswdUserDatabase#init()"
"java.io.BufferedReader#close()" -> "org.apache.catalina.startup.WebappServiceLoader#parseConfigFile(LinkedHashSet<java.lang.String>,java.net.URL)"
"java.io.BufferedReader#close()" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.BufferedReader#close()" -> "org.apache.tomcat.buildutil.Txt2Html#convert(java.io.File,java.io.File)"
"java.lang.Class#getConstructors()" -> "javax.el.Util#findConstructor(Class<?>,Class<?>[],java.lang.Object[])"
"java.util.concurrent.ExecutorService#awaitTermination(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.websocket.server.WsServerContainer#shutdownExecutor()"
"java.lang.String#String(byte[],int,int,java.lang.String)" -> "javax.servlet.http.HttpUtils#parsePostData(int,javax.servlet.ServletInputStream)"
"java.lang.String#String(byte[],int,int,java.lang.String)" -> "org.apache.coyote.http11.filters.ChunkedInputFilter#parseHeader()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.connector.Request#setAttribute(java.lang.String,java.lang.Object)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.core.StandardContext#getWorkPath()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.core.StandardContext#postWorkDirectory()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.loader.WebappClassLoaderBase#setWorkDir(java.io.File)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.loader.WebappLoader#setPermissions()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.manager.ManagerServlet#copy(java.io.File,java.io.File)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.servlets.CGIEnvironment#setCGIEnvironment(javax.servlet.http.HttpServletRequest)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.servlets.DefaultServlet#validateGlobalXsltFile(java.io.File)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.Bootstrap#setCatalinaHome()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.Catalina#initDirs()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.ClassLoaderFactory#createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.ContextConfig#fixDocBase()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.Embedded#initDirs()"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.ExpandWar#expand(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.ExpandWar#validate(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.HostConfig#deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.HostConfig#validateContextPath(java.io.File,java.lang.String)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.HostConfig#isDeletableResource(org.apache.catalina.startup.HostConfig.DeployedApplication,java.io.File)"
"java.io.File#getCanonicalPath()" -> "org.apache.catalina.startup.Tomcat#initBaseDir()"
"java.io.File#getCanonicalPath()" -> "org.apache.jasper.JspC#setUriroot(java.lang.String)"
"java.io.File#getCanonicalPath()" -> "org.apache.jasper.JspC#initClassLoader()"
"java.io.File#getCanonicalPath()" -> "org.apache.jasper.JspC#locateUriRoot(java.io.File)"
"java.io.File#getCanonicalPath()" -> "org.apache.naming.resources.FileDirContext#file(java.lang.String)"
"java.io.File#getCanonicalPath()" -> "org.apache.naming.resources.FileResourceAttributes#getCanonicalPath()"
"java.io.File#getCanonicalPath()" -> "org.apache.tomcat.util.IntrospectionUtils#guessInstall(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.io.File#getCanonicalPath()" -> "org.apache.tomcat.util.IntrospectionUtils#getURL(java.lang.String,java.lang.String)"
"java.io.File#getCanonicalPath()" -> "org.apache.tomcat.util.IntrospectionUtils#addJarsFromClassPath(Vector<java.net.URL>,java.lang.String)"
"java.lang.Long#decode(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#addEnvironment(org.apache.catalina.deploy.ContextEnvironment)"
"java.io.OutputStream#write(byte[])" -> "org.apache.catalina.filters.XServletOutputStream#write(byte[])"
"java.io.OutputStream#write(byte[])" -> "org.apache.catalina.ssi.SSIFilter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
"java.io.OutputStream#write(byte[])" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.io.OutputStream#write(byte[])" -> "org.apache.catalina.tribes.transport.bio.BioReplicationTask#sendAck(byte[])"
"java.io.OutputStream#write(byte[])" -> "org.apache.catalina.tribes.transport.bio.BioSender#pushMessage(byte[],boolean,boolean)"
"java.io.OutputStream#write(byte[])" -> "org.apache.coyote.ajp.AjpProcessor#process(SocketWrapper<java.net.Socket>)"
"java.io.OutputStream#write(byte[])" -> "org.apache.coyote.http11.InternalOutputBuffer#sendAck()"
"java.io.OutputStream#write(byte[])" -> "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream#write(byte[])"
"java.io.Writer#close()" -> "org.apache.catalina.servlets.WebdavServlet#doLock(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.io.Writer#close()" -> "org.apache.catalina.servlets.WebdavServlet#sendReport(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,Hashtable<java.lang.String,java.lang.Integer>)"
"java.io.Writer#close()" -> "org.apache.jasper.JspC#completeWebXml()"
"java.io.Writer#close()" -> "org.apache.jasper.runtime.BodyContentImpl#close()"
"java.io.Writer#close()" -> "org.apache.jasper.runtime.JspWriterImpl#close()"
"java.io.Writer#close()" -> "org.apache.tomcat.websocket.WsRemoteEndpointImplBase#sendObjectByCompletion(java.lang.Object,javax.websocket.SendHandler)"
"java.net.URLConnection#getInputStream()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.net.URLConnection#getInputStream()" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.net.URLConnection#getInputStream()" -> "org.apache.catalina.ssi.SSIServlet#processSSI(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.net.URL)"
"java.net.URLConnection#getInputStream()" -> "org.apache.catalina.startup.ContextConfig#processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL)"
"java.net.URLConnection#getInputStream()" -> "org.apache.catalina.startup.ContextConfig#getDefaultWebXmlFragment()"
"java.net.URLConnection#getInputStream()" -> "org.apache.jasper.JspCompilationContext#getJspLastModified()"
"java.net.URLConnection#getInputStream()" -> "org.apache.jasper.JspCompilationContext#getLastModified(java.lang.String)"
"java.net.URLConnection#getInputStream()" -> "org.apache.tomcat.util.scan.UrlJar#createJarInputStream()"
"java.nio.channels.ServerSocketChannel#accept()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.nio.channels.ServerSocketChannel#accept()" -> "org.apache.tomcat.util.net.Acceptor#run()"
"java.net.URLClassLoader#findClass(java.lang.String)" -> "org.apache.jasper.servlet.JasperLoader#loadClass(java.lang.String,boolean)"
"java.io.InputStreamReader#close()" -> "javax.el.ExpressionFactory#getClassNameServices(java.lang.ClassLoader)"
"java.io.InputStreamReader#close()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.net.Socket#getSoTimeout()" -> "org.apache.coyote.ajp.AjpProcessor#process(SocketWrapper<java.net.Socket>)"
"java.net.Socket#getSoTimeout()" -> "org.apache.coyote.http11.InternalNioInputBuffer#readSocket(boolean,boolean)"
"java.net.Socket#getSoTimeout()" -> "org.apache.tomcat.util.net.jsse.JSSESupport#handShake()"
"java.lang.Class#getDeclaredFields()" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStaticFinal()"
"java.lang.Class#getDeclaredFields()" -> "org.apache.catalina.loader.WebappClassLoaderBase#nullInstance(java.lang.Object)"
"java.lang.reflect.Field#setBoolean(java.lang.Object,boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStopTimerThread(java.lang.Thread)"
"java.io.OutputStream#flush()" -> "compressionFilters.CompressionResponseStream#flush()"
"java.io.OutputStream#flush()" -> "org.apache.catalina.filters.XServletOutputStream#flush()"
"java.io.OutputStream#flush()" -> "org.apache.catalina.ha.deploy.FileMessageFactory#writeMessage(org.apache.catalina.ha.deploy.FileMessage)"
"java.io.OutputStream#flush()" -> "org.apache.catalina.ssi.ResponseIncludeWrapper#flushOutputStreamOrWriter()"
"java.io.OutputStream#flush()" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.io.OutputStream#flush()" -> "org.apache.catalina.tribes.transport.bio.BioReplicationTask#sendAck(byte[])"
"java.io.OutputStream#flush()" -> "org.apache.catalina.tribes.transport.bio.BioSender#pushMessage(byte[],boolean,boolean)"
"java.io.OutputStream#flush()" -> "org.apache.coyote.http11.filters.FlushableGZIPOutputStream#flush()"
"java.io.OutputStream#flush()" -> "org.apache.coyote.http11.upgrade.BioServletOutputStream#doFlush()"
"java.io.OutputStream#flush()" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#flush()"
"java.io.OutputStream#flush()" -> "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream#flush()"
"java.io.OutputStream#flush()" -> "org.apache.tomcat.util.http.fileupload.util.Streams#copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
"java.util.concurrent.TimeUnit#sleep(long)" -> "org.apache.catalina.tribes.group.interceptors.SimpleCoordinator#installViewWhenStable()"
"java.sql.PreparedStatement#executeQuery()" -> "org.apache.catalina.realm.DataSourceRealm#getPassword(java.sql.Connection,java.lang.String)"
"java.sql.PreparedStatement#executeQuery()" -> "org.apache.catalina.realm.DataSourceRealm#getRoles(java.sql.Connection,java.lang.String)"
"java.sql.PreparedStatement#executeQuery()" -> "org.apache.catalina.realm.JDBCRealm#getPassword(java.lang.String)"
"java.sql.PreparedStatement#executeQuery()" -> "org.apache.catalina.realm.JDBCRealm#getRoles(java.lang.String)"
"java.sql.PreparedStatement#executeQuery()" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.sql.PreparedStatement#executeQuery()" -> "org.apache.catalina.session.JDBCStore#getSize()"
"java.sql.PreparedStatement#executeQuery()" -> "org.apache.catalina.session.JDBCStore#load(java.lang.String)"
"java.io.InputStream#read(byte[])" -> "chat.ChatServlet#read(org.apache.catalina.comet.CometEvent,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.authenticator.FormAuthenticator#restoreRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.authenticator.FormAuthenticator#saveRequest(org.apache.catalina.connector.Request,org.apache.catalina.Session)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.loader.WebappLoader#copy(java.io.InputStream,java.io.OutputStream)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.manager.host.HostManagerServlet#add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.manager.ManagerServlet#uploadWar(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.servlets.DefaultServlet#copyRange(java.io.InputStream,javax.servlet.ServletOutputStream)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.servlets.DefaultServlet#copyRange(java.io.InputStream,javax.servlet.ServletOutputStream,long,long)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.startup.ExpandWar#expand(java.io.InputStream,java.io.File)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.tribes.transport.bio.BioReplicationTask#drainSocket()"
"java.io.InputStream#read(byte[])" -> "org.apache.catalina.util.IOTools#flow(java.io.InputStream,java.io.OutputStream,byte[])"
"java.io.InputStream#read(byte[])" -> "org.apache.naming.resources.FileDirContext#rebind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)"
"java.io.InputStream#read(byte[])" -> "org.apache.tomcat.util.http.fileupload.IOUtils#copyLarge(java.io.InputStream,java.io.OutputStream)"
"java.io.InputStream#read(byte[])" -> "org.apache.tomcat.util.http.fileupload.util.Streams#copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
"java.io.InputStream#read(byte[])" -> "org.apache.tomcat.util.net.jsse.JSSESupport#handShake()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.CoyoteInputStream#read()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.CoyoteInputStream#available()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.CoyoteInputStream#read(byte[])"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.CoyoteInputStream#read(byte[],int,int)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.CoyoteInputStream#close()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.InputBuffer#setConverter()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.OutputBuffer#setConverter()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.Response#toAbsolute(java.lang.String)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.connector.ResponseFacade#flushBuffer()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.core.ApplicationContextFacade#executeMethod(java.lang.reflect.Method,org.apache.catalina.core.ApplicationContext,java.lang.Object[])"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.core.ApplicationDispatcher#forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.core.ApplicationDispatcher#include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.core.ApplicationDispatcher#dispatch(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.core.ApplicationFilterChain#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.core.ApplicationFilterChain#doFilterEvent(org.apache.catalina.comet.CometEvent)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.core.DefaultInstanceManager#loadClassMaybePrivileged(java.lang.String,java.lang.ClassLoader)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.session.PersistentManagerBase#clearStore()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.session.PersistentManagerBase#load()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.session.PersistentManagerBase#removeSession(java.lang.String)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.session.PersistentManagerBase#swapIn(java.lang.String)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.session.PersistentManagerBase#writeSession(org.apache.catalina.Session)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.session.StandardManager#load()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.catalina.session.StandardManager#unload()"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.jasper.runtime.PageContextImpl#include(java.lang.String,boolean)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.jasper.runtime.PageContextImpl#forward(java.lang.String)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.jasper.runtime.PageContextImpl#handlePageException(java.lang.Throwable)"
"java.security.AccessController#doPrivileged(PrivilegedExceptionAction<T>)" -> "org.apache.jasper.servlet.JspServlet#init(javax.servlet.ServletConfig)"
"java.net.URI#URI(java.lang.String)" -> "org.apache.catalina.filters.CorsFilter#isValidOrigin(java.lang.String)"
"java.net.URI#URI(java.lang.String)" -> "org.apache.catalina.filters.HttpHeaderSecurityFilter#setAntiClickJackingUri(java.lang.String)"
"java.net.URI#URI(java.lang.String)" -> "org.apache.catalina.realm.JNDIRealm#getDistinguishedName(javax.naming.directory.DirContext,java.lang.String,javax.naming.directory.SearchResult)"
"java.net.URI#URI(java.lang.String)" -> "org.apache.jasper.JspCompilationContext#getLastModified(java.lang.String)"
"java.net.URI#URI(java.lang.String)" -> "org.apache.tomcat.util.descriptor.LocalResolver#resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.net.URI#URI(java.lang.String)" -> "org.apache.tomcat.util.digester.Digester#resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.net.URI#URI(java.lang.String)" -> "org.apache.tomcat.websocket.server.WsHandshakeRequest#WsHandshakeRequest(javax.servlet.http.HttpServletRequest,Map<java.lang.String,java.lang.String>)"
"java.security.KeyStore#load(java.io.InputStream,char[])" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.security.KeyStore#load(java.io.InputStream,char[])" -> "org.apache.tomcat.websocket.WsWebSocketContainer#createSSLEngine(Map<java.lang.String,java.lang.Object>)"
"java.lang.String#String(byte[],java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#getString(java.lang.String)"
"java.lang.String#String(byte[],java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#getString()"
"java.lang.String#String(byte[],java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility#decodeWord(java.lang.String)"
"java.io.RandomAccessFile#setLength(long)" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.io.BufferedOutputStream#write(byte[],int,int)" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.io.BufferedOutputStream#write(byte[],int,int)" -> "org.apache.catalina.manager.ManagerServlet#uploadWar(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)"
"java.io.BufferedOutputStream#write(byte[],int,int)" -> "org.apache.catalina.startup.ExpandWar#expand(java.io.InputStream,java.io.File)"
"java.io.BufferedOutputStream#write(byte[],int,int)" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FileOutputStream#write(byte[],int,int)" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#copy(java.io.File,java.io.File)"
"java.io.FileOutputStream#write(byte[],int,int)" -> "org.apache.catalina.ha.deploy.FileMessageFactory#writeMessage(org.apache.catalina.ha.deploy.FileMessage)"
"java.io.FileOutputStream#write(byte[],int,int)" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.io.FileOutputStream#write(byte[],int,int)" -> "org.apache.catalina.manager.ManagerServlet#copyInternal(java.io.File,java.io.File,byte[])"
"java.io.FileOutputStream#write(byte[],int,int)" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.FileOutputStream#write(byte[],int,int)" -> "org.apache.naming.resources.FileDirContext#rebind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)"
"java.net.Socket#setTrafficClass(int)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setTrafficClass(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.util.jar.Manifest#Manifest(java.io.InputStream)" -> "org.apache.catalina.util.ExtensionValidator#validateApplication(javax.naming.directory.DirContext,org.apache.catalina.Context)"
"java.io.FileWriter#FileWriter(java.io.File)" -> "org.apache.tomcat.buildutil.Txt2Html#convert(java.io.File,java.io.File)"
"java.nio.channels.SelectableChannel#register(java.nio.channels.Selector,int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#bind()"
"java.nio.channels.SelectableChannel#register(java.nio.channels.Selector,int)" -> "org.apache.tomcat.util.net.NioSelectorPool#write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
"java.nio.channels.SelectableChannel#register(java.nio.channels.Selector,int)" -> "org.apache.tomcat.util.net.NioSelectorPool#read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
"java.nio.channels.SelectableChannel#register(java.nio.channels.Selector,int)" -> "org.apache.tomcat.util.net.SecureNioChannel#rehandshake(long)"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessionId(java.lang.String)"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessions(org.apache.catalina.Session[])"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" -> "org.apache.catalina.ha.session.DeltaRequest#serialize()"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" -> "org.apache.catalina.session.FileStore#save(org.apache.catalina.Session)"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" -> "org.apache.catalina.session.StandardManager#doUnload()"
"java.io.ObjectOutputStream#ObjectOutputStream(java.io.OutputStream)" -> "org.apache.catalina.tribes.io.XByteBuffer#serialize(java.io.Serializable)"
"java.sql.Connection#getAutoCommit()" -> "org.apache.catalina.realm.DataSourceRealm#close(java.sql.Connection)"
"java.sql.Connection#getAutoCommit()" -> "org.apache.catalina.session.JDBCStore#close(java.sql.Connection)"
"java.util.zip.GZIPOutputStream#finish()" -> "org.apache.coyote.http11.filters.GzipOutputFilter#end()"
"java.lang.reflect.Array#newInstance(Class<?>,int)" -> "org.apache.el.parser.AstValue#convertArgs(java.lang.Object[],java.lang.reflect.Method)"
"java.lang.reflect.Array#newInstance(Class<?>,int)" -> "org.apache.el.util.ReflectionUtil#forName(java.lang.String)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.ha.deploy.FileMessageFactory#FileMessageFactory(java.io.File,boolean)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.loader.WebappLoader#setRepositories()"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.loader.WebappLoader#copyDir(javax.naming.directory.DirContext,java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.manager.host.HostManagerServlet#add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.manager.ManagerServlet#uploadWar(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.manager.ManagerServlet#copyInternal(java.io.File,java.io.File,byte[])"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.servlets.CGIEnvironment#expandCGIScript()"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.startup.ExpandWar#copy(java.io.File,java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.startup.ExpandWar#expand(java.io.InputStream,java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.startup.HostConfig#deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.catalina.users.MemoryUserDatabase#save()"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.jasper.JspC#openWebxmlWriter(java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.naming.resources.FileDirContext#rebind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.tomcat.util.http.fileupload.DeferredFileOutputStream#thresholdReached()"
"java.io.FileOutputStream#FileOutputStream(java.io.File)" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#write(java.io.File)"
"java.io.Writer#write(int)" -> "org.apache.jasper.runtime.BodyContentImpl#write(int)"
"java.io.Writer#write(int)" -> "org.apache.jasper.runtime.JspWriterImpl#write(int)"
"java.net.Socket#Socket(java.net.InetAddress,int)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.io.FileReader#FileReader(java.lang.String)" -> "org.apache.catalina.startup.PasswdUserDatabase#init()"
"java.lang.ClassLoader#getResources(java.lang.String)" -> "org.apache.catalina.startup.WebappServiceLoader#load(Class<T>)"
"java.lang.Process#waitFor()" -> "org.apache.catalina.ssi.SSIExec#process(org.apache.catalina.ssi.SSIMediator,java.lang.String,java.lang.String[],java.lang.String[],java.io.PrintWriter)"
"java.net.ServerSocket#setReceiveBufferSize(int)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.ServerSocket)"
"java.util.concurrent.Future#get(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.websocket.LongToIntegerFuture#get(long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.Future#get(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#connectToServer(javax.websocket.Endpoint,javax.websocket.ClientEndpointConfig,java.net.URI)"
"java.util.concurrent.Future#get(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#writeRequest(org.apache.tomcat.websocket.AsyncChannelWrapper,java.nio.ByteBuffer,long)"
"java.util.concurrent.Future#get(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#processResponse(java.nio.ByteBuffer,org.apache.tomcat.websocket.AsyncChannelWrapper,long)"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.catalina.startup.ExpandWar#copy(java.io.File,java.io.File)"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#cancelledKey(java.nio.channels.SelectionKey)"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#closeSelector()"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.catalina.tribes.transport.nio.NioSender#disconnect()"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.tomcat.util.net.NioChannel#close()"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.tomcat.util.net.NioEndpoint#unbind()"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.tomcat.util.net.NioEndpoint#closeSocket(java.nio.channels.SocketChannel)"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.tomcat.util.net.Poller#cancelledKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.SocketStatus,boolean)"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.tomcat.util.net.Poller#processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint.KeyAttachment,boolean)"
"java.nio.channels.spi.AbstractInterruptibleChannel#close()" -> "org.apache.tomcat.util.net.SecureNioChannel#close(boolean)"
"java.sql.Connection#isClosed()" -> "org.apache.catalina.session.JDBCStore#getConnection()"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "javax.el.ExpressionFactory#newInstance(java.util.Properties)"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "org.apache.catalina.core.NamingContextListener#constructEnvEntry(java.lang.String,java.lang.String)"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "org.apache.catalina.loader.WebappLoader#createClassLoader()"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "org.apache.catalina.realm.JAASRealm#getConfig()"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "org.apache.catalina.startup.Catalina#addClusterRuleSet(org.apache.tomcat.util.digester.Digester,java.lang.String)"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "org.apache.catalina.startup.Tomcat#createContext(org.apache.catalina.Host,java.lang.String)"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "org.apache.jasper.servlet.JspServlet#init(javax.servlet.ServletConfig)"
"java.lang.reflect.Constructor#newInstance(java.lang.Object[])" -> "org.apache.naming.factory.DataSourceLinkFactory#wrapDataSource(java.lang.Object,java.lang.String,java.lang.String)"
"java.nio.channels.SocketChannel#connect(java.net.SocketAddress)" -> "org.apache.catalina.tribes.transport.nio.NioSender#connect()"
"java.net.DatagramSocket#setSoTimeout(int)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#setupSocket()"
"java.net.DatagramSocket#setSoTimeout(int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#configureDatagraChannel()"
"java.net.DatagramSocket#setSoTimeout(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.io.InputStream#skip(long)" -> "org.apache.catalina.servlets.DefaultServlet#copyRange(java.io.InputStream,javax.servlet.ServletOutputStream,long,long)"
"java.io.InputStream#skip(long)" -> "org.apache.jasper.xmlparser.ASCIIReader#skip(long)"
"java.io.InputStream#skip(long)" -> "org.apache.jasper.xmlparser.UCSReader#skip(long)"
"java.io.InputStream#skip(long)" -> "org.apache.jasper.xmlparser.XMLEncodingDetector#createInitialReader()"
"java.io.InputStream#skip(long)" -> "org.apache.jasper.xmlparser.RewindableInputStream#skip(long)"
"java.net.Socket#getOutputStream()" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.net.Socket#getOutputStream()" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.net.Socket#getOutputStream()" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.net.Socket#getOutputStream()" -> "org.apache.catalina.tribes.transport.bio.BioReplicationTask#sendAck(byte[])"
"java.net.Socket#getOutputStream()" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#getOutputStream()" -> "org.apache.coyote.ajp.AjpProcessor#process(SocketWrapper<java.net.Socket>)"
"java.net.Socket#getOutputStream()" -> "org.apache.coyote.http11.InternalOutputBuffer#init(SocketWrapper<java.net.Socket>,AbstractEndpoint<java.net.Socket>)"
"java.net.Socket#getOutputStream()" -> "org.apache.coyote.http11.upgrade.BioServletOutputStream#BioServletOutputStream(SocketWrapper<java.net.Socket>,int)"
"java.net.Socket#getOutputStream()" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#UpgradeBioProcessor(SocketWrapper<java.net.Socket>,org.apache.coyote.http11.upgrade.UpgradeInbound)"
"java.net.Socket#getOutputStream()" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStaticFinal()"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#nullInstance(java.lang.Object)"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesThreads()"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStopTimerThread(java.lang.Thread)"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalsForLeaks()"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesRmiTargets()"
"java.lang.reflect.Field#get(java.lang.Object)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesResourceBundles()"
"java.io.FileInputStream#FileInputStream(java.lang.String)" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.io.FileInputStream#FileInputStream(java.lang.String)" -> "org.apache.catalina.session.FileStore#load(java.lang.String)"
"java.io.FileInputStream#FileInputStream(java.lang.String)" -> "org.apache.catalina.session.StandardManager#doLoad()"
"java.io.FileInputStream#FileInputStream(java.lang.String)" -> "org.apache.catalina.startup.ContextConfig#getContextWebXmlSource()"
"java.io.FileInputStream#FileInputStream(java.lang.String)" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.lang.ClassLoader)"
"java.io.FileInputStream#FileInputStream(java.lang.String)" -> "org.apache.tomcat.util.modeler.modules.ModelerSource#getInputStream()"
"java.nio.channels.ServerSocketChannel#open()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#bind()"
"java.nio.channels.ServerSocketChannel#open()" -> "org.apache.tomcat.util.net.NioEndpoint#bind()"
"java.net.Socket#setSoLinger(boolean,int)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setSoLinger(boolean,int)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setSoLinger(boolean,int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setSoLinger(boolean,int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setSoLinger(boolean,int)" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.net.Socket#setSoLinger(boolean,int)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.lang.Class#forName(java.lang.String)" -> "javax.el.ExpressionFactory#newInstance(java.util.Properties)"
"java.lang.Class#forName(java.lang.String)" -> "javax.websocket.ContainerProvider#getWebSocketContainer()"
"java.lang.Class#forName(java.lang.String)" -> "javax.websocket.server.Configurator#loadDefault()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.connector.Connector#Connector(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.AprLifecycleListener#terminateAPR()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.AprLifecycleListener#initializeSSL()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.JreMemoryLeakPreventionListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#constructEnvEntry(java.lang.String,java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.StandardContext#getCharsetMapper()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.StandardContext#setWrapperClass(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.StandardContext#createWrapper()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.core.StandardHost#startInternal()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.filters.CsrfPreventionFilterBase#init(javax.servlet.FilterConfig)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalsForLeaks()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesRmiTargets()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#validateJarFile(java.io.File)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.loader.WebappLoader#createClassLoader()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.manager.ManagerServlet#resources(java.io.PrintWriter,java.lang.String,org.apache.tomcat.util.res.StringManager)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.manager.StatusTransformer#writeOSState(java.io.PrintWriter,int)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.mbeans.ContainerMBean#addChild(java.lang.String,java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.mbeans.ContainerMBean#addValve(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.mbeans.ContainerMBean#addLifeCycleListener(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.mbeans.MBeanFactory#createValve(java.lang.String,java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.mbeans.ServiceMBean#addExecutor(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.realm.JAASRealm#getConfig()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.realm.JDBCRealm#open()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.realm.JNDIRealm#constructInstance(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.realm.RealmBase#createUsernameRetriever(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.session.JDBCStore#open()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.Bootstrap#init()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.Catalina#addClusterRuleSet(org.apache.tomcat.util.digester.Digester,java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.ContextConfig#authenticatorConfig()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.HostConfig#deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.HostConfig#deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.LifecycleListenerRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.Tomcat#createContext(org.apache.catalina.Host,java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.UserConfig#deploy()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.startup.UserConfig#deploy(java.lang.String,java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.util.SessionIdGeneratorBase#createSecureRandom()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.catalina.valves.JDBCAccessLogValve#open()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.jasper.JspCompilationContext#createCompiler(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.jasper.runtime.TagHandlerPool#getTagHandlerPool(javax.servlet.ServletConfig)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.naming.factory.EjbFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.naming.factory.ResourceEnvFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.naming.factory.ResourceFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.naming.factory.TransactionFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.naming.resources.ProxyDirContext#ProxyDirContext(Hashtable<java.lang.String,java.lang.String>,javax.naming.directory.DirContext)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.util.digester.XercesParser#getXercesVersion()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#getURLClassLoader(java.net.URL[],java.lang.ClassLoader)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.util.modeler.BaseModelMBean#getAttributeClass(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.util.modeler.ManagedBean#createMBean(java.lang.Object)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.util.modeler.Registry#getModelerSource(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.util.net.SSLImplementation#getInstance(java.lang.String)"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.websocket.server.WsSci#isJava7OrLater()"
"java.lang.Class#forName(java.lang.String)" -> "org.apache.tomcat.websocket.Util#getGenericType(Class<T>,Class<? extends T>)"
"java.io.DataInput#readUTF()" -> "org.apache.catalina.ha.session.DeltaRequest#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.catalina.ha.session.AttributeInfo#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.catalina.ha.session.SerializablePrincipal#readPrincipal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.el.lang.Function#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.el.MethodExpressionImpl#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.el.MethodExpressionLiteral#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.el.ValueExpressionImpl#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.el.ValueExpressionLiteral#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.jasper.el.JspMethodExpression#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.jasper.el.JspValueExpression#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readUTF()" -> "org.apache.tomcat.util.bcel.classfile.ConstantUtf8#getInstance(java.io.DataInput)"
"java.lang.Double#Double(java.lang.String)" -> "org.apache.el.parser.AstFloatingPoint#getFloatingPoint()"
"java.io.ByteArrayInputStream#close()" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.io.BufferedReader#read()" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.Reader#read(char[])" -> "org.apache.catalina.servlets.DefaultServlet#copyRange(java.io.Reader,java.io.PrintWriter)"
"java.io.Reader#read(char[])" -> "org.apache.catalina.util.IOTools#flow(java.io.Reader,java.io.Writer,char[])"
"java.io.Reader#read(char[])" -> "org.apache.jasper.tagplugins.jstl.core.Out#output(javax.servlet.jsp.JspWriter,java.lang.Object,java.lang.String,java.lang.String,boolean)"
"java.util.zip.ZipFile#close()" -> "org.apache.catalina.loader.WebappClassLoaderBase#stop()"
"java.util.zip.ZipFile#close()" -> "org.apache.catalina.loader.WebappClassLoaderBase#closeJARs(boolean)"
"java.util.zip.ZipFile#close()" -> "org.apache.catalina.loader.WebappClassLoaderBase#validateJarFile(java.io.File)"
"java.util.zip.ZipFile#close()" -> "org.apache.catalina.startup.ExpandWar#expand(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.util.zip.ZipFile#close()" -> "org.apache.catalina.startup.ExpandWar#validate(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.util.zip.ZipFile#close()" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.util.zip.ZipFile#close()" -> "org.apache.catalina.startup.Tomcat#getWebappConfigFileFromJar(java.io.File,java.lang.String)"
"java.util.zip.ZipFile#close()" -> "org.apache.naming.resources.WARDirContext#release()"
"java.util.zip.ZipFile#close()" -> "org.apache.tomcat.util.scan.FileUrlJar#close()"
"java.util.zip.ZipFile#ZipFile(java.io.File)" -> "org.apache.naming.resources.WARDirContext#setDocBase(java.lang.String)"
"java.util.concurrent.Semaphore#acquire()" -> "org.apache.catalina.valves.SemaphoreValve#invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
"java.util.concurrent.Semaphore#acquire()" -> "org.apache.catalina.valves.MonitoredThread#markAsDone()"
"java.nio.channels.SocketChannel#finishConnect()" -> "org.apache.catalina.tribes.transport.nio.NioSender#process(java.nio.channels.SelectionKey,boolean)"
"java.util.jar.JarFile#JarFile(java.io.File)" -> "org.apache.catalina.loader.WebappClassLoaderBase#openJARs()"
"java.util.jar.JarFile#JarFile(java.io.File)" -> "org.apache.catalina.loader.WebappClassLoaderBase#validateJarFile(java.io.File)"
"java.util.jar.JarFile#JarFile(java.io.File)" -> "org.apache.catalina.loader.WebappLoader#setRepositories()"
"java.util.jar.JarFile#JarFile(java.io.File)" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.util.jar.JarFile#JarFile(java.io.File)" -> "org.apache.catalina.startup.Tomcat#getWebappConfigFileFromJar(java.io.File,java.lang.String)"
"java.sql.ResultSet#close()" -> "org.apache.catalina.realm.DataSourceRealm#getPassword(java.sql.Connection,java.lang.String)"
"java.sql.ResultSet#close()" -> "org.apache.catalina.realm.DataSourceRealm#getRoles(java.sql.Connection,java.lang.String)"
"java.sql.ResultSet#close()" -> "org.apache.catalina.realm.JDBCRealm#getPassword(java.lang.String)"
"java.sql.ResultSet#close()" -> "org.apache.catalina.realm.JDBCRealm#getRoles(java.lang.String)"
"java.sql.ResultSet#close()" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.sql.ResultSet#close()" -> "org.apache.catalina.session.JDBCStore#getSize()"
"java.sql.ResultSet#close()" -> "org.apache.catalina.session.JDBCStore#load(java.lang.String)"
"java.io.ObjectInputStream#readBoolean()" -> "org.apache.catalina.authenticator.SingleSignOnEntry#readObject(java.io.ObjectInputStream)"
"java.nio.channels.AsynchronousChannel#close()" -> "org.apache.tomcat.websocket.AsyncChannelWrapperNonSecure#close()"
"java.nio.channels.AsynchronousChannel#close()" -> "org.apache.tomcat.websocket.AsyncChannelWrapperSecure#close()"
"java.sql.DriverManager#deregisterDriver(java.sql.Driver)" -> "org.apache.catalina.loader.JdbcLeakPrevention#clearJdbcDriverRegistrations()"
"java.security.KeyStore#getInstance(java.lang.String,java.lang.String)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.lang.Short#decode(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#addEnvironment(org.apache.catalina.deploy.ContextEnvironment)"
"java.net.URL#openConnection()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.net.URL#openConnection()" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.net.URL#openConnection()" -> "org.apache.catalina.core.JreMemoryLeakPreventionListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.net.URL#openConnection()" -> "org.apache.catalina.ssi.SSIServlet#processSSI(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.net.URL)"
"java.net.URL#openConnection()" -> "org.apache.catalina.ssi.SSIServletExternalResolver#getURLConnection(java.lang.String,boolean)"
"java.net.URL#openConnection()" -> "org.apache.catalina.startup.ContextConfig#processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL)"
"java.net.URL#openConnection()" -> "org.apache.catalina.startup.ContextConfig#getDefaultWebXmlFragment()"
"java.net.URL#openConnection()" -> "org.apache.catalina.startup.ContextConfig#processAnnotationsJndi(java.net.URL,org.apache.catalina.deploy.WebXml,boolean)"
"java.net.URL#openConnection()" -> "org.apache.catalina.startup.ExpandWar#expand(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.net.URL#openConnection()" -> "org.apache.catalina.startup.ExpandWar#validate(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.net.URL#openConnection()" -> "org.apache.jasper.JspCompilationContext#getJspLastModified()"
"java.net.URL#openConnection()" -> "org.apache.jasper.JspCompilationContext#getLastModified(java.lang.String)"
"java.net.URL#openConnection()" -> "org.apache.naming.resources.BaseDirContext#addResourcesJar(java.net.URL)"
"java.net.URL#openConnection()" -> "org.apache.naming.resources.ClasspathURLStreamHandler#openConnection(java.net.URL)"
"java.net.URL#openConnection()" -> "org.apache.tomcat.util.scan.FileUrlJar#FileUrlJar(java.net.URL)"
"java.net.URL#openConnection()" -> "org.apache.tomcat.util.scan.StandardJarScanner#process(org.apache.tomcat.JarScannerCallback,java.net.URL)"
"java.net.URL#openConnection()" -> "org.apache.tomcat.util.scan.UrlJar#createJarInputStream()"
"java.util.logging.Handler#setFormatter(java.util.logging.Formatter)" -> "org.apache.juli.FileHandler#configure()"
"java.io.RandomAccessFile#RandomAccessFile(java.io.File,java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.net.ServerSocket#accept()" -> "org.apache.catalina.core.StandardServer#await()"
"java.net.ServerSocket#accept()" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.ServerSocket#accept()" -> "org.apache.tomcat.util.net.DefaultServerSocketFactory#acceptSocket(java.net.ServerSocket)"
"java.net.ServerSocket#accept()" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#acceptSocket(java.net.ServerSocket)"
"java.net.ServerSocket#accept()" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#checkConfig()"
"java.nio.channels.DatagramChannel#read(java.nio.ByteBuffer)" -> "org.apache.catalina.tribes.transport.nio.NioSender#read(java.nio.channels.SelectionKey)"
"java.net.DatagramSocket#bind(java.net.SocketAddress)" -> "org.apache.catalina.tribes.transport.ReceiverBase#bindUdp(java.net.DatagramSocket,int,int)"
"java.nio.channels.Selector#open()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#bind()"
"java.nio.channels.Selector#open()" -> "org.apache.catalina.tribes.transport.nio.ParallelNioSender#ParallelNioSender()"
"java.nio.channels.Selector#open()" -> "org.apache.tomcat.util.net.Poller#Poller()"
"java.nio.channels.Selector#open()" -> "org.apache.tomcat.util.net.NioSelectorPool#getSharedSelector()"
"java.nio.channels.Selector#open()" -> "org.apache.tomcat.util.net.NioSelectorPool#get()"
"java.nio.channels.Selector#open()" -> "org.apache.tomcat.util.net.SecureNioChannel#rehandshake(long)"
"java.security.cert.PKIXBuilderParameters#PKIXBuilderParameters(java.security.KeyStore,java.security.cert.CertSelector)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getParameters(java.lang.String,java.lang.String,java.security.KeyStore)"
"java.io.Reader#read(char[],int,int)" -> "org.apache.catalina.websocket.MessageInbound#onTextData(java.io.Reader)"
"java.io.Reader#read(char[],int,int)" -> "org.apache.el.parser.SimpleCharStream#FillBuff()"
"java.io.Reader#read(char[],int,int)" -> "org.apache.jasper.xmlparser.XMLEncodingDetector#load(int,boolean)"
"java.lang.Class#getDeclaredMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core.DefaultInstanceManager#getMethod(Class<?>,org.apache.catalina.core.DefaultInstanceManager.AnnotationCacheEntry)"
"java.lang.Class#getDeclaredMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core#run()"
"java.lang.Class#getDeclaredMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.core.JreMemoryLeakPreventionListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.lang.Class#getDeclaredMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStopTimerThread(java.lang.Thread)"
"java.lang.Class#getDeclaredMethod(java.lang.String,Class<?>[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalsForLeaks()"
"java.lang.Class#getDeclaredMethod(java.lang.String,Class<?>[])" -> "org.apache.naming.factory.webservices.ServiceProxy#ServiceProxy(Service)"
"java.util.logging.Logger#setLevel(java.util.logging.Level)" -> "org.apache.juli.ClassLoaderLogManager#addLogger(java.util.logging.Logger)"
"java.io.ObjectInputStream#defaultReadObject()" -> "org.apache.catalina.authenticator.SingleSignOnEntry#readObject(java.io.ObjectInputStream)"
"java.sql.ResultSet#getBinaryStream(int)" -> "org.apache.catalina.session.JDBCStore#load(java.lang.String)"
"java.net.DatagramSocket#setTrafficClass(int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#configureDatagraChannel()"
"java.net.DatagramSocket#setTrafficClass(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.lang.ClassLoader#getSystemResources(java.lang.String)" -> "org.apache.catalina.startup.WebappServiceLoader#load(Class<T>)"
"java.lang.Integer#parseInt(java.lang.String,int)" -> "javax.servlet.http.HttpUtils#parseName(java.lang.String,java.lang.StringBuilder)"
"java.lang.Integer#parseInt(java.lang.String,int)" -> "org.apache.tomcat.util.buf.UDecoder#convert(java.lang.String,boolean)"
"java.lang.Class#getMethods()" -> "javax.el.Util#findMethod(Class<?>,java.lang.String,Class<?>[],java.lang.Object[])"
"java.lang.Class#getMethods()" -> "org.apache.el.util.ReflectionUtil#getMethod(java.lang.Object,java.lang.Object,Class<?>[],java.lang.Object[])"
"java.lang.Class#getMethods()" -> "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsIntrospectionSource#createManagedBean(org.apache.tomcat.util.modeler.Registry,java.lang.String,Class<?>,java.lang.String)"
"java.io.ObjectInputStream#close()" -> "org.apache.catalina.ha.session.DeltaManager#deserializeSessions(byte[])"
"java.io.ObjectInputStream#close()" -> "org.apache.catalina.session.FileStore#load(java.lang.String)"
"java.io.ObjectInputStream#close()" -> "org.apache.catalina.session.JDBCStore#load(java.lang.String)"
"java.io.ObjectInputStream#close()" -> "org.apache.catalina.session.StandardManager#doLoad()"
"java.io.ObjectInputStream#close()" -> "org.apache.catalina.tribes.io.XByteBuffer#deserialize(byte[],int,int,java.lang.ClassLoader[])"
"java.io.ObjectInputStream#close()" -> "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsSerSource#execute()"
"java.io.InputStream#read(byte[],int,int)" -> "javax.servlet.http.HttpUtils#parsePostData(int,javax.servlet.ServletInputStream)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.catalina.connector.Request#readPostBody(byte[],int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.catalina.connector.Request#readChunkedPostBody()"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesJdbc()"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.catalina.websocket.MessageInbound#onBinaryData(java.io.InputStream)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.coyote.ajp.AjpProcessor#read(byte[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.coyote.http11.InternalInputBuffer#fill(boolean)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.coyote.http11.upgrade.BioServletInputStream#doRead(boolean,byte[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#read(boolean,byte[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.jasper.xmlparser.ASCIIReader#read(char[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.jasper.xmlparser.UCSReader#read(char[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.jasper.xmlparser.UTF8Reader#read(char[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.jasper.xmlparser.RewindableInputStream#read(byte[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.naming.resources.ProxyDirContext#cacheLoad(org.apache.naming.resources.CacheEntry)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream#write(java.io.InputStream)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.IOUtils#read(java.io.InputStream,byte[],int,int)"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.MultipartStream#readByte()"
"java.io.InputStream#read(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.ItemInputStream#makeAvailable()"
"java.net.ServerSocket#ServerSocket(int,int)" -> "org.apache.tomcat.util.net.DefaultServerSocketFactory#createSocket(int,int)"
"java.io.OutputStreamWriter#write(int)" -> "org.apache.catalina.util.URLEncoder#encode(java.lang.String,java.lang.String)"
"java.io.OutputStreamWriter#write(int)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#URLEncode(java.lang.String,java.lang.String)"
"java.security.MessageDigest#clone()" -> "org.apache.catalina.realm.RealmBase#Digest(java.lang.String,java.lang.String,java.lang.String)"
"java.nio.channels.AsynchronousChannelGroup#withCachedThreadPool(java.util.concurrent.ExecutorService,int)" -> "org.apache.tomcat.websocket.AsyncChannelGroupUtil#createAsynchronousChannelGroup()"
"java.net.URL#URL(java.net.URL,java.lang.String)" -> "org.apache.jasper.servlet.JspCServletContext#getResource(java.lang.String)"
"java.net.URL#URL(java.net.URL,java.lang.String)" -> "org.apache.tomcat.util.descriptor.LocalResolver#resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.net.Socket#setSendBufferSize(int)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setSendBufferSize(int)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setSendBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setSendBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setSendBufferSize(int)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.io.Closeable#close()" -> "org.apache.tomcat.util.http.fileupload.IOUtils#closeQuietly(java.io.Closeable)"
"java.nio.channels.Selector#select(long)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.nio.channels.Selector#select(long)" -> "org.apache.catalina.tribes.transport.nio.ParallelNioSender#doLoop(long,int,boolean,org.apache.catalina.tribes.ChannelMessage)"
"java.nio.channels.Selector#select(long)" -> "org.apache.tomcat.util.net.BlockPoller#run()"
"java.nio.channels.Selector#select(long)" -> "org.apache.tomcat.util.net.Poller#run()"
"java.nio.channels.Selector#select(long)" -> "org.apache.tomcat.util.net.NioSelectorPool#write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
"java.nio.channels.Selector#select(long)" -> "org.apache.tomcat.util.net.NioSelectorPool#read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
"java.nio.channels.Selector#select(long)" -> "org.apache.tomcat.util.net.SecureNioChannel#rehandshake(long)"
"java.sql.PreparedStatement#setNull(int,int)" -> "org.apache.catalina.realm.JDBCRealm#credentials(java.sql.Connection,java.lang.String)"
"java.io.ObjectOutputStream#defaultWriteObject()" -> "org.apache.catalina.authenticator.SingleSignOnEntry#writeObject(java.io.ObjectOutputStream)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.core.DefaultInstanceManager#postConstruct(java.lang.Object,Class<?>)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.core.DefaultInstanceManager#preDestroy(java.lang.Object,Class<?>)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.core.DefaultInstanceManager#lookupFieldResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Field,java.lang.String,Class<?>)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.core.DefaultInstanceManager#lookupMethodResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Method,java.lang.String,Class<?>)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStaticFinal()"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#nullInstance(java.lang.Object)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesThreads()"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStopTimerThread(java.lang.Thread)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalsForLeaks()"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesRmiTargets()"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesResourceBundles()"
"java.lang.reflect.AccessibleObject#setAccessible(boolean)" -> "org.apache.tomcat.websocket.pojo.PojoMessageHandlerBase#PojoMessageHandlerBase(java.lang.Object,java.lang.reflect.Method,javax.websocket.Session,java.lang.Object[],int,boolean,int,long)"
"java.util.Properties#load(java.io.InputStream)" -> "javax.el.ExpressionFactory#getClassNameJreDir()"
"java.util.Properties#load(java.io.InputStream)" -> "org.apache.catalina.core.DefaultInstanceManager#loadProperties(Set<java.lang.String>,java.lang.String,java.lang.String,org.apache.juli.logging.Log)"
"java.util.Properties#load(java.io.InputStream)" -> "org.apache.catalina.startup.CatalinaProperties#loadProperties()"
"java.util.Properties#load(java.io.InputStream)" -> "org.apache.catalina.util.CharsetMapper#CharsetMapper(java.lang.String)"
"java.util.Properties#load(java.io.InputStream)" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.io.InputStream,java.lang.ClassLoader)"
"java.io.BufferedInputStream#read()" -> "org.apache.tomcat.buildutil.CheckEol#check(java.io.File,List<org.apache.tomcat.buildutil.CheckEol.CheckFailure>,org.apache.tomcat.buildutil.CheckEol.Mode)"
"java.net.URL#URL(java.net.URL,java.lang.String,java.net.URLStreamHandler)" -> "org.apache.catalina.core.ApplicationContext#getResource(java.lang.String)"
"java.io.DataInput#readLong()" -> "org.apache.tomcat.util.bcel.classfile.ConstantLong#ConstantLong(java.io.DataInput)"
"java.net.DatagramSocket#setReceiveBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#configureDatagraChannel()"
"java.net.DatagramSocket#setReceiveBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.nio.channels.AsynchronousSocketChannel#open(java.nio.channels.AsynchronousChannelGroup)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#connectToServer(javax.websocket.Endpoint,javax.websocket.ClientEndpointConfig,java.net.URI)"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ant.AbstractCatalinaCommandTask#createQueryString(java.lang.String)"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ant.JKStatusUpdateTask#createLink()"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ant.JMXGetTask#execute()"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ant.JMXQueryTask#execute()"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ant.JMXSetTask#execute()"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.ant.ResourcesTask#execute()"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.manager.host.HTMLHostManagerServlet#list(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)"
"java.net.URLEncoder#encode(java.lang.String,java.lang.String)" -> "org.apache.catalina.valves.RequestParameterElement#urlEncode(java.lang.String)"
"java.io.RandomAccessFile#write(byte[],int,int)" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.net.InetAddress#getLocalHost()" -> "org.apache.catalina.manager.HTMLManagerServlet#list(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,org.apache.tomcat.util.res.StringManager)"
"java.net.InetAddress#getLocalHost()" -> "org.apache.catalina.manager.StatusManagerServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.net.InetAddress#getLocalHost()" -> "org.apache.catalina.tribes.transport.ReceiverBase#getBind()"
"java.net.InetAddress#getLocalHost()" -> "org.apache.catalina.valves.ExtendedAccessLogValve#getLogElement(java.lang.String,org.apache.catalina.valves.ExtendedAccessLogValve.PatternTokenizer)"
"java.net.InetAddress#getLocalHost()" -> "org.apache.catalina.valves#addElement(java.lang.StringBuilder,java.util.Date,org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
"java.lang.reflect.Array#getLength(java.lang.Object)" -> "javax.el.ArrayELResolver#getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)"
"java.lang.reflect.Array#getLength(java.lang.Object)" -> "javax.el.ArrayELResolver#checkBounds(java.lang.Object,int)"
"java.lang.reflect.Array#getLength(java.lang.Object)" -> "org.apache.catalina.mbeans.MBeanDumper#dumpBeans(javax.management.MBeanServer,Set<javax.management.ObjectName>)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "javax.el.BeanELResolver#getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "javax.el.BeanELResolver#setValue(javax.el.ELContext,java.lang.Object,java.lang.Object,java.lang.Object)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "javax.el.BeanELResolver#invoke(javax.el.ELContext,java.lang.Object,java.lang.Object,Class<?>[],java.lang.Object[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core.ApplicationContextFacade#executeMethod(java.lang.reflect.Method,org.apache.catalina.core.ApplicationContext,java.lang.Object[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core#run()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core.AprLifecycleListener#terminateAPR()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core.AprLifecycleListener#initializeSSL()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core.DefaultInstanceManager#postConstruct(java.lang.Object,Class<?>)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core.DefaultInstanceManager#preDestroy(java.lang.Object,Class<?>)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core.DefaultInstanceManager#lookupMethodResource(javax.naming.Context,java.lang.Object,java.lang.reflect.Method,java.lang.String,Class<?>)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.core.JreMemoryLeakPreventionListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.deploy.NamingResources#cleanUp(java.lang.Object,java.lang.String,java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#getClassLoadingLockInternal(java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesJdbc()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStopTimerThread(java.lang.Thread)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalsForLeaks()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.loader.WebappLoader#getClasspath(java.lang.ClassLoader)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.manager.StatusTransformer#writeOSState(java.io.PrintWriter,int)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.manager.util.SessionUtils#guessLocaleFromSession(javax.servlet.http.HttpSession)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.security.SecurityUtil#execute(java.lang.reflect.Method,java.lang.Object,java.lang.Object[],java.security.Principal)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.security#run()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#init()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#load(java.lang.String[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#getServer()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#start()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#stop()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#stopServer()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#stopServer(java.lang.String[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#setAwait(boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Bootstrap#getAwait()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.ConnectorCreateRule#_setExecutor(org.apache.catalina.connector.Connector,org.apache.catalina.Executor)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.CopyParentClassLoaderRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.Tool#main(java.lang.String[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.catalina.startup.SetPublicIdRule#begin(java.lang.String,java.lang.String,org.xml.sax.Attributes)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.el.parser.AstFunction#getValue(org.apache.el.lang.EvaluationContext)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.el.parser.AstValue#invoke(org.apache.el.lang.EvaluationContext,Class#RAW[],java.lang.Object[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#introspecthelper(java.lang.Object,java.lang.String,java.lang.String,javax.servlet.ServletRequest,java.lang.String,boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleGetProperty(java.lang.Object,java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetPropertyExpression(java.lang.Object,java.lang.String,java.lang.String,javax.servlet.jsp.PageContext,org.apache.jasper.runtime.ProtectedFunctionMapper)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,java.lang.Object)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,int)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,short)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,long)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,double)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,float)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,char)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,byte)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.jasper.runtime.JspRuntimeLibrary#handleSetProperty(java.lang.Object,java.lang.String,boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.naming.factory.DataSourceHandler#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.naming.factory.webservices.ServiceProxy#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.naming.factory.webservices.ServiceRefFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.compat.Jre7Compat#forLanguageTag(java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.compat.Jre8Compat#setUseServerCipherSuitesOrder(javax.net.ssl.SSLServerSocket,boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.compat.Jre8Compat#setUseServerCipherSuitesOrder(javax.net.ssl.SSLEngine,boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.digester.XercesParser#getXercesVersion()"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#execute(java.lang.Object,java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#setAttribute(java.lang.Object,java.lang.String,java.lang.Object)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#getAttribute(java.lang.Object,java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#getURLClassLoader(java.net.URL[],java.lang.ClassLoader)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#setProperty(java.lang.Object,java.lang.String,java.lang.String,boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#getProperty(java.lang.Object,java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#setProperty(java.lang.Object,java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#callMain(Class<?>,java.lang.String[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#callMethod1(java.lang.Object,java.lang.String,java.lang.Object,java.lang.String,java.lang.ClassLoader)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#callMethod0(java.lang.Object,java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.IntrospectionUtils#callMethodN(java.lang.Object,java.lang.String,java.lang.Object[],Class<?>[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.modeler.BaseModelMBean#getAttribute(java.lang.String)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.modeler.BaseModelMBean#invoke(java.lang.String,java.lang.Object[],java.lang.String[])"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.util.modeler.BaseModelMBean#setAttribute(javax.management.Attribute)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.websocket.pojo.PojoEndpointBase#doOnOpen(javax.websocket.Session,javax.websocket.EndpointConfig)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.websocket.pojo.PojoEndpointBase#onClose(javax.websocket.Session,javax.websocket.CloseReason)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.websocket.pojo.PojoEndpointBase#onError(javax.websocket.Session,java.lang.Throwable)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.websocket.pojo.PojoMessageHandlerPartialBase#onMessage(T,boolean)"
"java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[])" -> "org.apache.tomcat.websocket.pojo.PojoMessageHandlerWholeBase#onMessage(T)"
"java.io.File#createNewFile()" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#copy(java.io.File,java.io.File)"
"java.io.File#createNewFile()" -> "org.apache.catalina.ha.deploy.FileMessageFactory#FileMessageFactory(java.io.File,boolean)"
"java.io.File#createNewFile()" -> "org.apache.catalina.servlets.CGIEnvironment#expandCGIScript()"
"java.io.File#createNewFile()" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.catalina.ant.jmx.JMXAccessorTask#convertStringToType(java.lang.String,java.lang.String)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.catalina.valves.SSLValve#invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.el.lang.ELSupport#coerceToNumber(java.lang.String,Class<?>)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#convert(java.lang.String,java.lang.String,Class<?>,Class<?>)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#setProperty(java.lang.Object,java.lang.String,java.lang.String,boolean)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#convert(java.lang.String,Class<?>)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.tomcat.util.modeler.Registry#convertValue(java.lang.String,java.lang.String)"
"java.lang.Integer#valueOf(java.lang.String)" -> "org.apache.tomcat.websocket.Util#coerceToType(Class<?>,java.lang.String)"
"java.lang.reflect.Array#set(java.lang.Object,int,java.lang.Object)" -> "javax.el.ArrayELResolver#setValue(javax.el.ELContext,java.lang.Object,java.lang.Object,java.lang.Object)"
"java.io.FilterInputStream#read(byte[])" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.io.FilterInputStream#read(byte[])" -> "org.apache.catalina.tribes.group.interceptors.GzipInterceptor#decompress(byte[])"
"java.sql.Connection#setAutoCommit(boolean)" -> "org.apache.catalina.realm.JDBCRealm#open()"
"java.sql.Connection#setAutoCommit(boolean)" -> "org.apache.catalina.session.JDBCStore#open()"
"java.sql.Connection#setAutoCommit(boolean)" -> "org.apache.catalina.valves.JDBCAccessLogValve#open()"
"java.io.OutputStream#write(int)" -> "javax.servlet.ServletOutputStream#print(java.lang.String)"
"java.io.OutputStream#write(int)" -> "org.apache.catalina.filters.XServletOutputStream#write(int)"
"java.io.OutputStream#write(int)" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.io.OutputStream#write(int)" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#write(int)"
"java.io.OutputStream#write(int)" -> "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream#write(int)"
"java.io.OutputStream#write(int)" -> "org.apache.tomcat.util.http.fileupload.util.mime.QuotedPrintableDecoder#decode(byte[],java.io.OutputStream)"
"java.util.zip.GZIPOutputStream#GZIPOutputStream(java.io.OutputStream)" -> "compressionFilters.CompressionResponseStream#writeToGZip(byte[],int,int)"
"java.util.zip.GZIPOutputStream#GZIPOutputStream(java.io.OutputStream)" -> "org.apache.catalina.tribes.group.interceptors.GzipInterceptor#compress(byte[])"
"java.security.cert.CertificateFactory#getInstance(java.lang.String,java.lang.String)" -> "org.apache.catalina.valves.SSLValve#invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String,java.lang.String)" -> "org.apache.coyote.ajp.AbstractAjpProcessor#action(org.apache.coyote.ActionCode,java.lang.Object)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String,java.lang.String)" -> "org.apache.coyote.http11.Http11AprProcessor#actionInternal(org.apache.coyote.ActionCode,java.lang.Object)"
"java.net.MulticastSocket#setInterface(java.net.InetAddress)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#setupSocket()"
"java.nio.channels.Selector#selectNow()" -> "org.apache.catalina.tribes.transport.nio.ParallelNioSender#keepalive()"
"java.nio.channels.Selector#selectNow()" -> "org.apache.tomcat.util.net.BlockPoller#run()"
"java.nio.channels.Selector#selectNow()" -> "org.apache.tomcat.util.net.Poller#run()"
"java.nio.channels.Selector#selectNow()" -> "org.apache.tomcat.util.net.NioSelectorPool#write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
"java.nio.channels.Selector#selectNow()" -> "org.apache.tomcat.util.net.NioSelectorPool#read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
"java.util.jar.JarInputStream#getNextJarEntry()" -> "org.apache.tomcat.util.scan.UrlJar#entryExists(java.lang.String)"
"java.util.jar.JarInputStream#getNextJarEntry()" -> "org.apache.tomcat.util.scan.UrlJar#getInputStream(java.lang.String)"
"java.util.jar.JarInputStream#getNextJarEntry()" -> "org.apache.tomcat.util.scan.UrlJar#nextEntry()"
"java.io.OutputStream#write(byte[],int,int)" -> "compressionFilters.CompressionResponseStream#close()"
"java.io.OutputStream#write(byte[],int,int)" -> "compressionFilters.CompressionResponseStream#writeToGZip(byte[],int,int)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.filters.XServletOutputStream#write(byte[],int,int)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.loader.WebappLoader#copy(java.io.InputStream,java.io.OutputStream)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.manager.host.HostManagerServlet#add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.servlets.DefaultServlet#copy(org.apache.naming.resources.CacheEntry,java.io.InputStream,javax.servlet.ServletOutputStream)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.servlets.DefaultServlet#copyRange(java.io.InputStream,javax.servlet.ServletOutputStream)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.servlets.DefaultServlet#copyRange(java.io.InputStream,javax.servlet.ServletOutputStream,long,long)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.catalina.util.IOTools#flow(java.io.InputStream,java.io.OutputStream,byte[])"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.coyote.ajp.AjpProcessor#output(byte[],int,int)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.coyote.http11.filters.FlushableGZIPOutputStream#deflate()"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.coyote.http11.InternalOutputBuffer#commit()"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.coyote.http11.InternalOutputBuffer#realWriteBytes(byte[],int,int)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.coyote.http11.OutputStreamOutputBuffer#doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.coyote.http11.upgrade.BioServletOutputStream#doWrite(boolean,byte[],int,int)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#write(byte[],int,int)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.ByteArrayOutputStream#writeTo(java.io.OutputStream)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.IOUtils#copyLarge(java.io.InputStream,java.io.OutputStream)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream#write(byte[],int,int)"
"java.io.OutputStream#write(byte[],int,int)" -> "org.apache.tomcat.util.http.fileupload.util.Streams#copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
"java.nio.charset.CoderResult#throwException()" -> "org.apache.catalina.websocket.WsOutbound#doWriteText(java.nio.CharBuffer,boolean)"
"java.nio.charset.CoderResult#throwException()" -> "org.apache.tomcat.util.buf.B2CConverter#convert(org.apache.tomcat.util.buf.ByteChunk,org.apache.tomcat.util.buf.CharChunk,boolean)"
"java.nio.charset.CoderResult#throwException()" -> "org.apache.tomcat.util.buf.C2BConverter#convert(org.apache.tomcat.util.buf.CharChunk,org.apache.tomcat.util.buf.ByteChunk)"
"java.io.DataInput#readDouble()" -> "org.apache.tomcat.util.bcel.classfile.ConstantDouble#ConstantDouble(java.io.DataInput)"
"java.nio.channels.SocketChannel#write(java.nio.ByteBuffer)" -> "org.apache.catalina.tribes.transport.nio.NioSender#write(java.nio.channels.SelectionKey)"
"java.nio.channels.SocketChannel#write(java.nio.ByteBuffer)" -> "org.apache.tomcat.util.net.NioChannel#write(java.nio.ByteBuffer)"
"java.nio.channels.SocketChannel#write(java.nio.ByteBuffer)" -> "org.apache.tomcat.util.net.SecureNioChannel#flush(java.nio.ByteBuffer)"
"java.nio.channels.SocketChannel#write(java.nio.ByteBuffer)" -> "org.apache.tomcat.util.net.SecureNioChannel#write(java.nio.ByteBuffer)"
"java.sql.Statement#close()" -> "org.apache.catalina.realm.DataSourceRealm#getPassword(java.sql.Connection,java.lang.String)"
"java.sql.Statement#close()" -> "org.apache.catalina.realm.DataSourceRealm#getRoles(java.sql.Connection,java.lang.String)"
"java.sql.Statement#close()" -> "org.apache.catalina.realm.JDBCRealm#close(java.sql.Connection)"
"java.sql.Statement#close()" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.sql.Statement#close()" -> "org.apache.catalina.session.JDBCStore#close(java.sql.Connection)"
"java.sql.Statement#close()" -> "org.apache.catalina.valves.JDBCAccessLogValve#close()"
"java.net.HttpURLConnection#setRequestMethod(java.lang.String)" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.AnnotationEntry#AnnotationEntry(java.io.DataInput,org.apache.tomcat.util.bcel.classfile.ConstantPool)"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.Annotations#Annotations(java.io.DataInput,org.apache.tomcat.util.bcel.classfile.ConstantPool)"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ClassParser#readAttributes()"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ClassParser#readClassInfo()"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ClassParser#readFields()"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ClassParser#readInterfaces()"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ClassParser#readMethods()"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ConstantClass#ConstantClass(java.io.DataInput)"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ConstantPool#ConstantPool(java.io.DataInput)"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ElementValue#readElementValue(java.io.DataInput,org.apache.tomcat.util.bcel.classfile.ConstantPool)"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.ElementValuePair#ElementValuePair(java.io.DataInput,org.apache.tomcat.util.bcel.classfile.ConstantPool)"
"java.io.DataInput#readUnsignedShort()" -> "org.apache.tomcat.util.bcel.classfile.Utility#swallowFieldOrMethod(java.io.DataInput)"
"java.io.RandomAccessFile#close()" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.catalina.ant.jmx.JMXAccessorTask#convertStringToType(java.lang.String,java.lang.String)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.catalina.ssi.SSIFilter#init(javax.servlet.FilterConfig)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.catalina.ssi.SSIServlet#init()"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.el.lang.ELSupport#coerceToNumber(java.lang.String,Class<?>)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#convert(java.lang.String,java.lang.String,Class<?>,Class<?>)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#setProperty(java.lang.Object,java.lang.String,java.lang.String,boolean)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.tomcat.util.modeler.Registry#convertValue(java.lang.String,java.lang.String)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.tomcat.websocket.Util#coerceToType(Class<?>,java.lang.String)"
"java.lang.Long#valueOf(java.lang.String)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#connectToServer(javax.websocket.Endpoint,javax.websocket.ClientEndpointConfig,java.net.URI)"
"java.net.MulticastSocket#MulticastSocket(int)" -> "org.apache.catalina.ha.backend.MultiCastSender#send(java.lang.String)"
"java.net.MulticastSocket#MulticastSocket(int)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#setupSocket()"
"java.security.KeyStore#getInstance(java.lang.String)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.security.KeyStore#getInstance(java.lang.String)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#createSSLEngine(Map<java.lang.String,java.lang.Object>)"
"java.sql.ResultSet#getString(int)" -> "org.apache.catalina.realm.DataSourceRealm#getPassword(java.sql.Connection,java.lang.String)"
"java.sql.ResultSet#getString(int)" -> "org.apache.catalina.realm.DataSourceRealm#getRoles(java.sql.Connection,java.lang.String)"
"java.sql.ResultSet#getString(int)" -> "org.apache.catalina.realm.JDBCRealm#getPassword(java.lang.String)"
"java.sql.ResultSet#getString(int)" -> "org.apache.catalina.realm.JDBCRealm#getRoles(java.lang.String)"
"java.sql.ResultSet#getString(int)" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.util.logging.Handler#setEncoding(java.lang.String)" -> "org.apache.juli.FileHandler#configure()"
"java.net.Socket#getInputStream()" -> "org.apache.catalina.core.StandardServer#await()"
"java.net.Socket#getInputStream()" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.net.Socket#getInputStream()" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.net.Socket#getInputStream()" -> "org.apache.catalina.tribes.transport.bio.BioReplicationTask#drainSocket()"
"java.net.Socket#getInputStream()" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#getInputStream()" -> "org.apache.coyote.ajp.AjpProcessor#process(SocketWrapper<java.net.Socket>)"
"java.net.Socket#getInputStream()" -> "org.apache.coyote.http11.InternalInputBuffer#init(SocketWrapper<java.net.Socket>,AbstractEndpoint<java.net.Socket>)"
"java.net.Socket#getInputStream()" -> "org.apache.coyote.http11.upgrade.BioServletInputStream#BioServletInputStream(SocketWrapper<java.net.Socket>)"
"java.net.Socket#getInputStream()" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#UpgradeBioProcessor(SocketWrapper<java.net.Socket>,org.apache.coyote.http11.upgrade.UpgradeInbound)"
"java.net.Socket#getInputStream()" -> "org.apache.tomcat.util.net.jsse.JSSESupport#handShake()"
"java.sql.PreparedStatement#setInt(int,int)" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.sql.PreparedStatement#setInt(int,int)" -> "org.apache.catalina.valves.JDBCAccessLogValve#log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
"java.lang.reflect.Array#get(java.lang.Object,int)" -> "javax.el.ArrayELResolver#getValue(javax.el.ELContext,java.lang.Object,java.lang.Object)"
"java.lang.reflect.Array#get(java.lang.Object,int)" -> "org.apache.catalina.mbeans.MBeanDumper#dumpBeans(javax.management.MBeanServer,Set<javax.management.ObjectName>)"
"java.io.Writer#write(java.lang.String)" -> "jsp2.examples.simpletag.HelloWorldSimpleTag#doTag()"
"java.io.Writer#write(java.lang.String)" -> "jsp2.examples.simpletag.TileSimpleTag#doTag()"
"java.io.Writer#write(java.lang.String)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.catalina.servlets.WebdavServlet#doLock(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.catalina.servlets.WebdavServlet#sendReport(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,Hashtable<java.lang.String,java.lang.Integer>)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.catalina.util.XMLWriter#sendData()"
"java.io.Writer#write(java.lang.String)" -> "org.apache.catalina.valves.ErrorReportValve#report(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,java.lang.Throwable)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.JspC#generateWebMapping(java.lang.String,org.apache.jasper.JspCompilationContext)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#write(java.lang.String)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#newLine()"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(boolean)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(char)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(int)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(long)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(float)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(double)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(java.lang.String)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.BodyContentImpl#print(java.lang.Object)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#newLine()"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(boolean)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(char)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(int)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(long)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(float)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(double)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(java.lang.String)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.runtime.JspWriterImpl#print(java.lang.Object)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.jasper.tagplugins.jstl.core.Out#output(javax.servlet.jsp.JspWriter,java.lang.Object,java.lang.String,java.lang.String,boolean)"
"java.io.Writer#write(java.lang.String)" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.util.logging.Level#parse(java.lang.String)" -> "org.apache.juli.ClassLoaderLogManager#addLogger(java.util.logging.Logger)"
"java.util.logging.Level#parse(java.lang.String)" -> "org.apache.juli.FileHandler#configure()"
"java.net.Socket#Socket(java.lang.String,int)" -> "org.apache.catalina.mbeans.RmiClientLocalhostSocketFactory#createSocket(java.lang.String,int)"
"java.net.Socket#Socket(java.lang.String,int)" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)" -> "org.apache.catalina.tribes.transport.nio.NioReplicationTask#drainChannel(java.nio.channels.SelectionKey,org.apache.catalina.tribes.io.ObjectReader)"
"java.net.Socket#setTcpNoDelay(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setTcpNoDelay(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setTcpNoDelay(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setTcpNoDelay(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setTcpNoDelay(boolean)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.util.concurrent.CountDownLatch#await(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.util.net.NioEndpoint#stopInternal()"
"java.util.concurrent.CountDownLatch#await(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.util.net.KeyAttachment#awaitLatch(java.util.concurrent.CountDownLatch,long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.CountDownLatch#await(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.websocket.WrapperFuture#get(long,java.util.concurrent.TimeUnit)"
"java.util.concurrent.CountDownLatch#await(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.websocket.FutureToSendHandler#get(long,java.util.concurrent.TimeUnit)"
"java.lang.Runtime#exec(java.lang.String)" -> "org.apache.catalina.ssi.SSIExec#process(org.apache.catalina.ssi.SSIMediator,java.lang.String,java.lang.String[],java.lang.String[],java.io.PrintWriter)"
"java.io.ObjectInputStream#readObject()" -> "org.apache.catalina.authenticator.SingleSignOnEntry#readObject(java.io.ObjectInputStream)"
"java.io.ObjectInputStream#readObject()" -> "org.apache.catalina.ha.session.DeltaManager#deserializeSessions(byte[])"
"java.io.ObjectInputStream#readObject()" -> "org.apache.catalina.session.StandardManager#doLoad()"
"java.io.ObjectInputStream#readObject()" -> "org.apache.catalina.session.StandardSession#readObject(java.io.ObjectInputStream)"
"java.io.ObjectInputStream#readObject()" -> "org.apache.catalina.tribes.io.XByteBuffer#deserialize(byte[],int,int,java.lang.ClassLoader[])"
"java.io.ObjectInputStream#readObject()" -> "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsSerSource#execute()"
"java.io.BufferedReader#readLine()" -> "javax.el.ExpressionFactory#getClassNameServices(java.lang.ClassLoader)"
"java.io.BufferedReader#readLine()" -> "org.apache.catalina.core.StandardContext#getDeploymentDescriptor()"
"java.io.BufferedReader#readLine()" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.io.BufferedReader#readLine()" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.io.BufferedReader#readLine()" -> "org.apache.catalina.servlets.CGIRunner#sendToLog(java.io.BufferedReader)"
"java.io.BufferedReader#readLine()" -> "org.apache.catalina.startup.PasswdUserDatabase#init()"
"java.io.BufferedReader#readLine()" -> "org.apache.catalina.startup.WebappServiceLoader#parseConfigFile(LinkedHashSet<java.lang.String>,java.net.URL)"
"java.io.BufferedReader#readLine()" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.BufferedReader#readLine()" -> "org.apache.tomcat.buildutil.Txt2Html#convert(java.io.File,java.io.File)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "compressionFilters.CompressionServletResponseWrapper#getWriter()"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "javax.servlet.http.NoBodyResponse#getWriter()"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#renderXml(java.lang.String,org.apache.naming.resources.CacheEntry,javax.xml.transform.Source)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#renderHtml(java.lang.String,org.apache.naming.resources.CacheEntry)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.catalina.ssi.ResponseIncludeWrapper#getWriter()"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.catalina.ssi.SSIFilter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.catalina.users.MemoryUserDatabase#save()"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.catalina.util.DOMWriter#DOMWriter(java.lang.String,boolean)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.catalina.util.URLEncoder#encode(java.lang.String,java.lang.String)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.jasper.JspC#openWebxmlWriter(java.io.File)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#URLEncode(java.lang.String,java.lang.String)"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.juli.FileHandler#openWriter()"
"java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream,java.lang.String)" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.lang.Object#wait(long)" -> "org.apache.catalina.tribes.group.interceptors.NonBlockingCoordinator#startElection(boolean)"
"java.lang.Object#wait(long)" -> "org.apache.catalina.tribes.group.RpcChannel#send(org.apache.catalina.tribes.Member[],java.io.Serializable,int,int,long)"
"java.lang.Object#wait(long)" -> "org.apache.catalina.tribes.transport.bio.util.SingleRemoveSynchronizedAddLock#lockAdd()"
"java.lang.Object#wait(long)" -> "org.apache.catalina.tribes.transport.bio.util.SingleRemoveSynchronizedAddLock#lockRemove()"
"java.lang.Object#wait(long)" -> "org.apache.catalina.tribes.transport.SenderQueue#getSender(long)"
"java.lang.Object#wait(long)" -> "org.apache.tomcat.util.net.Poller#destroy()"
"java.lang.Object#wait(long)" -> "org.apache.tomcat.util.net.Poller#run()"
"java.lang.Object#wait(long)" -> "org.apache.tomcat.util.net.Sendfile#destroy()"
"java.io.RandomAccessFile#seek(long)" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.lang.Long#Long(java.lang.String)" -> "org.apache.el.parser.AstInteger#getInteger()"
"java.nio.channels.Selector#close()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#closeSelector()"
"java.nio.channels.Selector#close()" -> "org.apache.catalina.tribes.transport.nio.ParallelNioSender#finalize()"
"java.nio.channels.Selector#close()" -> "org.apache.tomcat.util.net.BlockPoller#run()"
"java.nio.channels.Selector#close()" -> "org.apache.tomcat.util.net.Poller#run()"
"java.nio.channels.Selector#close()" -> "org.apache.tomcat.util.net.NioSelectorPool#put(java.nio.channels.Selector)"
"java.nio.channels.Selector#close()" -> "org.apache.tomcat.util.net.NioSelectorPool#close()"
"java.nio.channels.Selector#close()" -> "org.apache.tomcat.util.net.SecureNioChannel#rehandshake(long)"
"java.io.InputStream#available()" -> "chat.ChatServlet#read(org.apache.catalina.comet.CometEvent,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.io.InputStream#available()" -> "org.apache.jasper.xmlparser.RewindableInputStream#available()"
"java.security.cert.Certificate#getEncoded()" -> "org.apache.tomcat.util.net.jsse.JSSESupport#getX509Certificates(javax.net.ssl.SSLSession)"
"java.io.InputStream#close()" -> "examples.ShowSource#doEndTag()"
"java.io.InputStream#close()" -> "javax.el.ExpressionFactory#getClassNameServices(java.lang.ClassLoader)"
"java.io.InputStream#close()" -> "javax.el.ExpressionFactory#getClassNameJreDir()"
"java.io.InputStream#close()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.io.InputStream#close()" -> "org.apache.catalina.ant.ValidatorTask#execute()"
"java.io.InputStream#close()" -> "org.apache.catalina.core.DefaultInstanceManager#loadProperties(Set<java.lang.String>,java.lang.String,java.lang.String,org.apache.juli.logging.Log)"
"java.io.InputStream#close()" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesJdbc()"
"java.io.InputStream#close()" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.io.InputStream#close()" -> "org.apache.catalina.loader.WebappLoader#copy(java.io.InputStream,java.io.OutputStream)"
"java.io.InputStream#close()" -> "org.apache.catalina.manager.host.HostManagerServlet#add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)"
"java.io.InputStream#close()" -> "org.apache.catalina.manager.ManagerServlet#uploadWar(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)"
"java.io.InputStream#close()" -> "org.apache.catalina.realm.MemoryRealm#startInternal()"
"java.io.InputStream#close()" -> "org.apache.catalina.servlets.CGIEnvironment#expandCGIScript()"
"java.io.InputStream#close()" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.io.InputStream#close()" -> "org.apache.catalina.servlets.DefaultServlet#getReadme(javax.naming.directory.DirContext)"
"java.io.InputStream#close()" -> "org.apache.catalina.servlets.DefaultServlet#secureXslt(java.io.InputStream)"
"java.io.InputStream#close()" -> "org.apache.catalina.servlets.DefaultServlet#copy(org.apache.naming.resources.CacheEntry,java.io.InputStream,javax.servlet.ServletOutputStream)"
"java.io.InputStream#close()" -> "org.apache.catalina.servlets.DefaultServlet#copy(org.apache.naming.resources.CacheEntry,javax.servlet.ServletOutputStream,org.apache.catalina.servlets.DefaultServlet.Range)"
"java.io.InputStream#close()" -> "org.apache.catalina.servlets.DefaultServlet#copy(org.apache.naming.resources.CacheEntry,javax.servlet.ServletOutputStream,Iterator<org.apache.catalina.servlets.DefaultServlet.Range>,java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.Catalina#load()"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.CatalinaProperties#loadProperties()"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ContextConfig#processContextConfig(org.apache.tomcat.util.digester.Digester,java.net.URL)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ContextConfig#getDefaultWebXmlFragment()"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ContextConfig#getContextWebXmlSource()"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ContextConfig#getWebXmlSource(java.lang.String,java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ContextConfig#processAnnotationsJar(java.net.URL,org.apache.catalina.deploy.WebXml,boolean)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ContextConfig#processAnnotationsJndi(java.net.URL,org.apache.catalina.deploy.WebXml,boolean)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ContextConfig#populateJavaClassCache(java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.FragmentJarScannerCallback#scan(java.io.File)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.ExpandWar#expand(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.HostConfig#deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.TldConfig#tldScanWebXml()"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.TldConfig#tldScanResourcePaths(java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.TldConfig#tldScanDir(java.io.File)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.TldConfig#tldScanJar(java.net.JarURLConnection)"
"java.io.InputStream#close()" -> "org.apache.catalina.startup.WebappServiceLoader#parseConfigFile(LinkedHashSet<java.lang.String>,java.net.URL)"
"java.io.InputStream#close()" -> "org.apache.catalina.tribes.io.XByteBuffer#deserialize(byte[],int,int,java.lang.ClassLoader[])"
"java.io.InputStream#close()" -> "org.apache.catalina.users.MemoryUserDatabase#open()"
"java.io.InputStream#close()" -> "org.apache.catalina.util.CharsetMapper#CharsetMapper(java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.catalina.util.ExtensionValidator#validateApplication(javax.naming.directory.DirContext,org.apache.catalina.Context)"
"java.io.InputStream#close()" -> "org.apache.catalina.util.ExtensionValidator#addSystemResource(java.io.File)"
"java.io.InputStream#close()" -> "org.apache.coyote.http11.upgrade.BioServletInputStream#doClose()"
"java.io.InputStream#close()" -> "org.apache.jasper.JspCompilationContext#getJspLastModified()"
"java.io.InputStream#close()" -> "org.apache.jasper.JspCompilationContext#getLastModified(java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.jasper.servlet.JspCServletContext#getResource(java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.jasper.xmlparser.ASCIIReader#close()"
"java.io.InputStream#close()" -> "org.apache.jasper.xmlparser.UCSReader#close()"
"java.io.InputStream#close()" -> "org.apache.jasper.xmlparser.UTF8Reader#close()"
"java.io.InputStream#close()" -> "org.apache.jasper.xmlparser.XMLEncodingDetector#getEncoding(java.lang.String,java.util.jar.JarFile,org.apache.jasper.JspCompilationContext,ErrorDispatcher)"
"java.io.InputStream#close()" -> "org.apache.jasper.xmlparser.RewindableInputStream#close()"
"java.io.InputStream#close()" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.io.InputStream,java.lang.ClassLoader)"
"java.io.InputStream#close()" -> "org.apache.naming.resources.FileDirContext#rebind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)"
"java.io.InputStream#close()" -> "org.apache.naming.resources.ProxyDirContext#cacheLoad(org.apache.naming.resources.CacheEntry)"
"java.io.InputStream#close()" -> "org.apache.tomcat.util.descriptor.InputSourceUtil#close(org.xml.sax.InputSource)"
"java.io.InputStream#close()" -> "org.apache.tomcat.util.http.fileupload.FileItemStreamImpl#close()"
"java.io.InputStream#close()" -> "org.apache.tomcat.util.http.fileupload.ItemInputStream#close(boolean)"
"java.io.InputStream#close()" -> "org.apache.tomcat.util.http.fileupload.util.Streams#copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
"java.io.InputStream#close()" -> "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsSerSource#execute()"
"java.io.InputStream#close()" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getCRLs(java.lang.String)"
"java.io.InputStream#close()" -> "org.apache.tomcat.websocket.WsWebSocketContainer#createSSLEngine(Map<java.lang.String,java.lang.Object>)"
"java.util.logging.Handler#setLevel(java.util.logging.Level)" -> "org.apache.juli.FileHandler#configure()"
"java.util.concurrent.ThreadPoolExecutor#awaitTermination(long,java.util.concurrent.TimeUnit)" -> "org.apache.tomcat.util.net.AbstractEndpoint#shutdownExecutor()"
"java.lang.ClassLoader#defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesJdbc()"
"java.lang.Long#parseLong(java.lang.String,int)" -> "org.apache.catalina.authenticator.DigestInfo#validate(org.apache.catalina.connector.Request,org.apache.catalina.deploy.LoginConfig)"
"java.sql.PreparedStatement#execute()" -> "org.apache.catalina.session.JDBCStore#remove(java.lang.String,java.sql.Connection)"
"java.sql.PreparedStatement#execute()" -> "org.apache.catalina.session.JDBCStore#clear()"
"java.sql.PreparedStatement#execute()" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.beans.Introspector#getBeanInfo(Class<?>)" -> "javax.el.BeanELResolver#getFeatureDescriptors(javax.el.ELContext,java.lang.Object)"
"java.beans.Introspector#getBeanInfo(Class<?>)" -> "javax.el.BeanProperties#BeanProperties(Class<?>)"
"java.beans.Introspector#getBeanInfo(Class<?>)" -> "javax.el.BeanProperties#populateFromInterfaces(Class<?>)"
"java.beans.Introspector#getBeanInfo(Class<?>)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#introspecthelper(java.lang.Object,java.lang.String,java.lang.String,javax.servlet.ServletRequest,java.lang.String,boolean)"
"java.beans.Introspector#getBeanInfo(Class<?>)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#getWriteMethod(Class<?>,java.lang.String)"
"java.beans.Introspector#getBeanInfo(Class<?>)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#getReadMethod(Class<?>,java.lang.String)"
"java.beans.Introspector#getBeanInfo(Class<?>)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.net.URL#toURI()" -> "org.apache.catalina.core.StandardServer#initInternal()"
"java.net.URL#toURI()" -> "org.apache.catalina.realm.JAASRealm#getConfig()"
"java.net.URL#toURI()" -> "org.apache.catalina.startup.ContextConfig#processResourceJARs(Set<org.apache.catalina.deploy.WebXml>)"
"java.net.URL#toURI()" -> "org.apache.catalina.startup.ContextConfig#getWebXmlSource(java.lang.String,java.lang.String)"
"java.net.URL#toURI()" -> "org.apache.catalina.startup.ContextConfig#processAnnotationsUrl(java.net.URL,org.apache.catalina.deploy.WebXml,boolean)"
"java.net.URL#toURI()" -> "org.apache.jasper.servlet.JspCServletContext#getRealPath(java.lang.String)"
"java.net.URL#toURI()" -> "org.apache.tomcat.util.descriptor.LocalResolver#resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.net.URL#toURI()" -> "org.apache.tomcat.util.scan.StandardJarScanner#process(org.apache.tomcat.JarScannerCallback,java.net.URL)"
"java.lang.String#getBytes(java.lang.String)" -> "org.apache.catalina.realm.RealmBase#Digest(java.lang.String,java.lang.String,java.lang.String)"
"java.lang.String#getBytes(java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.util.mime.MimeUtility#decodeWord(java.lang.String)"
"java.security.cert.CertStore#getInstance(java.lang.String,java.security.cert.CertStoreParameters)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getParameters(java.lang.String,java.lang.String,java.security.KeyStore)"
"java.lang.Double#parseDouble(java.lang.String)" -> "org.apache.catalina.ant.jmx.JMXAccessorCondition#eval()"
"java.lang.Double#parseDouble(java.lang.String)" -> "org.apache.catalina.connector.Request#parseLocalesHeader(java.lang.String,TreeMap<java.lang.Double,ArrayList<java.util.Locale>>)"
"java.lang.Double#parseDouble(java.lang.String)" -> "org.apache.el.parser.AstNegative#getValue(org.apache.el.lang.EvaluationContext)"
"java.lang.Double#parseDouble(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Double#parseDouble(java.lang.String)" -> "websocket.drawboard.DrawMessage#parseFromString(java.lang.String)"
"java.io.StringReader#mark(int)" -> "org.apache.tomcat.util.http.parser.HttpParser#skipLws(java.io.StringReader,boolean)"
"java.io.FilterOutputStream#write(byte[])" -> "org.apache.catalina.tribes.group.interceptors.GzipInterceptor#compress(byte[])"
"java.io.FilterOutputStream#write(byte[])" -> "org.apache.tomcat.util.log.SystemLogHandler#write(byte[])"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.core.JreMemoryLeakPreventionListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#addService(org.apache.catalina.deploy.ContextService)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#addRepository(java.lang.String)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.startup.Bootstrap#createClassLoader(java.lang.String,java.lang.ClassLoader)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.startup.CatalinaProperties#loadProperties()"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.startup.ClassLoaderFactory#buildClassLoaderUrl(java.lang.String)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.startup.ClassLoaderFactory#buildClassLoaderUrl(java.io.File)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.startup.ContextConfig#getDefaultWebXmlFragment()"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.startup.ContextConfig#processAnnotationsJndi(java.net.URL,org.apache.catalina.deploy.WebXml,boolean)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.catalina.startup.WebappServiceLoader#load(Class<T>)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.jasper.JspCompilationContext#getResource(java.lang.String)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.naming.factory.webservices.ServiceRefFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.tomcat.util.buf.UriUtil#buildJarUrl(java.lang.String,java.lang.String)"
"java.net.URL#URL(java.lang.String)" -> "org.apache.tomcat.util.buf.UriUtil#buildJarSafeUrl(java.io.File)"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.core.DefaultInstanceManager#getField(Class<?>,org.apache.catalina.core.DefaultInstanceManager.AnnotationCacheEntry)"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.core#run()"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesThreads()"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesStopTimerThread(java.lang.Thread)"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalsForLeaks()"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#checkThreadLocalMapForLeaks(java.lang.Object,java.lang.reflect.Field)"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesRmiTargets()"
"java.lang.Class#getDeclaredField(java.lang.String)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesResourceBundles()"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.catalina.ant.jmx.JMXAccessorCondition#eval()"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.catalina.authenticator.DigestInfo#validate(org.apache.catalina.connector.Request,org.apache.catalina.deploy.LoginConfig)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.catalina.filters.CorsFilter#parseAndStore(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.catalina.servlets.CGIServlet#init(javax.servlet.ServletConfig)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#parseContentRange(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#parseRange(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.apache.naming.resources.ResourceAttributes)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.catalina.tribes.membership.McastService#start(int)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.coyote.Response#checkSpecialHeader(java.lang.String,java.lang.String)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.el.parser.AstNegative#getValue(org.apache.el.lang.EvaluationContext)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.naming.resources.ResourceAttributes#getContentLength()"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.FileItemIteratorImpl#getContentLength(org.apache.tomcat.util.http.fileupload.FileItemHeaders)"
"java.lang.Long#parseLong(java.lang.String)" -> "org.apache.tomcat.util.http.fileupload.servlet.ServletRequestContext#contentLength()"
"java.lang.Long#parseLong(java.lang.String)" -> "websocket.drawboard#onMessage(java.lang.String)"
"java.lang.Long#parseLong(java.lang.String)" -> "websocket.drawboard#run()"
"java.util.logging.Logger#addHandler(java.util.logging.Handler)" -> "org.apache.juli.ClassLoaderLogManager#addLogger(java.util.logging.Logger)"
"java.util.logging.Logger#addHandler(java.util.logging.Handler)" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.io.InputStream,java.lang.ClassLoader)"
"java.io.InputStreamReader#read()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.net.Socket#connect(java.net.SocketAddress)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.util.zip.DeflaterOutputStream#flush()" -> "org.apache.catalina.tribes.group.interceptors.GzipInterceptor#compress(byte[])"
"java.util.zip.DeflaterOutputStream#flush()" -> "org.apache.coyote.http11.filters.GzipOutputFilter#flush()"
"java.io.BufferedReader#read(char[],int,int)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.catalina.ha.session.DeltaRequest#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.catalina.ha.session.AttributeInfo#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.catalina.ha.session.SerializablePrincipal#writePrincipal(org.apache.catalina.realm.GenericPrincipal,java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.el.lang.Function#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.el.MethodExpressionImpl#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.el.MethodExpressionLiteral#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.el.ValueExpressionImpl#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.el.ValueExpressionLiteral#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.jasper.el.JspMethodExpression#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeUTF(java.lang.String)" -> "org.apache.jasper.el.JspValueExpression#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutputStream#flush()" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessionId(java.lang.String)"
"java.io.ObjectOutputStream#flush()" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessions(org.apache.catalina.Session[])"
"java.io.ObjectOutputStream#flush()" -> "org.apache.catalina.ha.session.DeltaRequest#serialize()"
"java.io.ObjectOutputStream#flush()" -> "org.apache.catalina.session.StandardManager#doUnload()"
"java.io.ObjectOutputStream#flush()" -> "org.apache.catalina.tribes.io.XByteBuffer#serialize(java.io.Serializable)"
"java.io.Reader#read()" -> "org.apache.jasper.JspC#getElement(java.io.Reader)"
"java.io.Reader#read()" -> "websocket.tc7.echo.EchoStreamInbound#onTextData(java.io.Reader)"
"java.nio.channels.FileChannel#transferTo(long,long,java.nio.channels.WritableByteChannel)" -> "org.apache.catalina.startup.ExpandWar#copy(java.io.File,java.io.File)"
"java.nio.channels.FileChannel#transferTo(long,long,java.nio.channels.WritableByteChannel)" -> "org.apache.tomcat.util.net.Poller#processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint.KeyAttachment,boolean)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.catalina.ha.session.AttributeInfo#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.catalina.ha.session.DeltaSession#writeObject(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.catalina.ha.session.SerializablePrincipal#writePrincipal(org.apache.catalina.realm.GenericPrincipal,java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.catalina.tribes.group.RpcMessage#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.el.lang.FunctionMapperImpl#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.el.lang.Function#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.el.lang.VariableMapperImpl#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.el.MethodExpressionImpl#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.el.MethodExpressionLiteral#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.el.ValueExpressionImpl#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.el.ValueExpressionLiteral#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.jasper.el.JspMethodExpression#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#writeObject(java.lang.Object)" -> "org.apache.jasper.el.JspValueExpression#writeExternal(java.io.ObjectOutput)"
"java.net.DatagramSocket#send(java.net.DatagramPacket)" -> "org.apache.catalina.ha.backend.MultiCastSender#send(java.lang.String)"
"java.net.DatagramSocket#send(java.net.DatagramPacket)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#send(boolean,java.net.DatagramPacket)"
"java.net.ServerSocket#setReuseAddress(boolean)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.ServerSocket)"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.catalina.filters.XForwardedRequest#getDateHeader(java.lang.String)"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.catalina.ssi.ResponseIncludeWrapper#addHeader(java.lang.String,java.lang.String)"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.catalina.ssi.ResponseIncludeWrapper#setHeader(java.lang.String,java.lang.String)"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.naming.resources.ResourceAttributes#getCreation()"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.naming.resources.ResourceAttributes#getCreationDate()"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.naming.resources.ResourceAttributes#getLastModified()"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.naming.resources.ResourceAttributes#getLastModifiedDate()"
"java.text.DateFormat#parse(java.lang.String)" -> "org.apache.tomcat.util.http.FastHttpDateFormat#internalParseDate(java.lang.String,java.text.DateFormat[])"
"java.io.Writer#write(java.lang.String,int,int)" -> "org.apache.jasper.runtime.BodyContentImpl#write(java.lang.String,int,int)"
"java.io.Writer#write(java.lang.String,int,int)" -> "org.apache.jasper.runtime.JspWriterImpl#write(java.lang.String,int,int)"
"java.net.DatagramSocket#setSendBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#configureDatagraChannel()"
"java.net.DatagramSocket#setSendBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setReuseAddress(boolean)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.net.Socket#setReuseAddress(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setReuseAddress(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setReuseAddress(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setReuseAddress(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setReuseAddress(boolean)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.io.CharArrayWriter#writeTo(java.io.Writer)" -> "org.apache.jasper.JspC#completeWebXml()"
"java.nio.channels.FileChannel#size()" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.nio.channels.FileChannel#size()" -> "org.apache.catalina.startup.ExpandWar#copy(java.io.File,java.io.File)"
"java.nio.channels.FileChannel#size()" -> "org.apache.tomcat.util.net.Poller#processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint.KeyAttachment,boolean)"
"java.sql.ResultSet#next()" -> "org.apache.catalina.realm.DataSourceRealm#getPassword(java.sql.Connection,java.lang.String)"
"java.sql.ResultSet#next()" -> "org.apache.catalina.realm.DataSourceRealm#getRoles(java.sql.Connection,java.lang.String)"
"java.sql.ResultSet#next()" -> "org.apache.catalina.realm.JDBCRealm#getPassword(java.lang.String)"
"java.sql.ResultSet#next()" -> "org.apache.catalina.realm.JDBCRealm#getRoles(java.lang.String)"
"java.sql.ResultSet#next()" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.sql.ResultSet#next()" -> "org.apache.catalina.session.JDBCStore#getSize()"
"java.sql.ResultSet#next()" -> "org.apache.catalina.session.JDBCStore#load(java.lang.String)"
"java.lang.Double#valueOf(java.lang.String)" -> "org.apache.catalina.ant.jmx.JMXAccessorTask#convertStringToType(java.lang.String,java.lang.String)"
"java.lang.Double#valueOf(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#addEnvironment(org.apache.catalina.deploy.ContextEnvironment)"
"java.lang.Double#valueOf(java.lang.String)" -> "org.apache.el.lang.ELSupport#coerceToNumber(java.lang.String,Class<?>)"
"java.lang.Double#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#convert(java.lang.String,java.lang.String,Class<?>,Class<?>)"
"java.lang.Double#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Double#valueOf(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Double#valueOf(java.lang.String)" -> "org.apache.tomcat.websocket.Util#coerceToType(Class<?>,java.lang.String)"
"java.util.logging.Handler#setFilter(java.util.logging.Filter)" -> "org.apache.juli.FileHandler#configure()"
"java.util.concurrent.CountDownLatch#await()" -> "org.apache.tomcat.websocket.WrapperFuture#get()"
"java.util.concurrent.CountDownLatch#await()" -> "org.apache.tomcat.websocket.FutureToSendHandler#get()"
"java.nio.channels.DatagramChannel#send(java.nio.ByteBuffer,java.net.SocketAddress)" -> "org.apache.catalina.tribes.transport.nio.NioReplicationTask#sendAck(java.nio.channels.SelectionKey,java.nio.channels.WritableByteChannel,byte[],java.net.SocketAddress)"
"java.lang.Integer#decode(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#addEnvironment(org.apache.catalina.deploy.ContextEnvironment)"
"java.io.StringReader#reset()" -> "org.apache.tomcat.util.http.parser.HttpParser#skipLws(java.io.StringReader,boolean)"
"java.lang.Short#valueOf(java.lang.String)" -> "org.apache.el.lang.ELSupport#coerceToNumber(java.lang.String,Class<?>)"
"java.lang.Short#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#convert(java.lang.String,java.lang.String,Class<?>,Class<?>)"
"java.lang.Short#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Short#valueOf(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Short#valueOf(java.lang.String)" -> "org.apache.tomcat.websocket.Util#coerceToType(Class<?>,java.lang.String)"
"java.net.Socket#setOOBInline(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setOOBInline(boolean)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setOOBInline(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setOOBInline(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setOOBInline(boolean)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.nio.channels.DatagramChannel#connect(java.net.SocketAddress)" -> "org.apache.catalina.tribes.transport.nio.NioSender#connect()"
"java.net.ServerSocket#ServerSocket(int)" -> "org.apache.tomcat.util.net.DefaultServerSocketFactory#createSocket(int)"
"java.net.URI#URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)" -> "org.apache.catalina.core.ApplicationContext#getResource(java.lang.String)"
"java.security.KeyStore#isKeyEntry(java.lang.String)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getKeyManagers(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.net.DatagramSocket#receive(java.net.DatagramPacket)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#receive()"
"java.net.Socket#getReceiveBufferSize()" -> "org.apache.catalina.tribes.io.ObjectReader#ObjectReader(java.net.Socket)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.realm.DataSourceRealm#credentials(java.sql.Connection,java.lang.String)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.realm.DataSourceRealm#roles(java.sql.Connection,java.lang.String)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.realm.JDBCRealm#credentials(java.sql.Connection,java.lang.String)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.realm.JDBCRealm#roles(java.sql.Connection,java.lang.String)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.session.JDBCStore#getSize()"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.session.JDBCStore#load(java.lang.String)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.session.JDBCStore#remove(java.lang.String,java.sql.Connection)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.session.JDBCStore#clear()"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.sql.PreparedStatement#setString(int,java.lang.String)" -> "org.apache.catalina.valves.JDBCAccessLogValve#log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
"java.io.BufferedOutputStream#flush()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.io.BufferedOutputStream#flush()" -> "org.apache.catalina.manager.ManagerServlet#uploadWar(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)"
"java.io.BufferedOutputStream#flush()" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.io.BufferedOutputStream#flush()" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.util.zip.ZipFile#getInputStream(java.util.zip.ZipEntry)" -> "org.apache.naming.resources.WARResource#streamContent()"
"java.util.concurrent.LinkedBlockingDeque#offer(E,long,java.util.concurrent.TimeUnit)" -> "org.apache.juli.AsyncFileHandler#publish(java.util.logging.LogRecord)"
"java.lang.ClassLoader#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)" -> "org.apache.catalina.loader.WebappClassLoaderBase#findClassInternal(java.lang.String)"
"java.util.jar.JarInputStream#JarInputStream(java.io.InputStream)" -> "org.apache.catalina.util.ExtensionValidator#getManifest(java.io.InputStream)"
"java.net.JarURLConnection#getJarFile()" -> "org.apache.catalina.startup.ExpandWar#expand(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.net.JarURLConnection#getJarFile()" -> "org.apache.catalina.startup.ExpandWar#validate(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.net.JarURLConnection#getJarFile()" -> "org.apache.naming.resources.BaseDirContext#addResourcesJar(java.net.URL)"
"java.net.JarURLConnection#getJarFile()" -> "org.apache.tomcat.util.scan.FileUrlJar#FileUrlJar(java.net.URL)"
"java.io.OutputStream#close()" -> "compressionFilters.CompressionFilterTestServlet#doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.io.OutputStream#close()" -> "compressionFilters.CompressionResponseStream#close()"
"java.io.OutputStream#close()" -> "compressionFilters.CompressionServletResponseWrapper#finishResponse()"
"java.io.OutputStream#close()" -> "javax.servlet.http.HttpServlet#doTrace(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.io.OutputStream#close()" -> "org.apache.catalina.core.ApplicationDispatcher#doForward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
"java.io.OutputStream#close()" -> "org.apache.catalina.filters.XServletOutputStream#close()"
"java.io.OutputStream#close()" -> "org.apache.catalina.loader.WebappLoader#copy(java.io.InputStream,java.io.OutputStream)"
"java.io.OutputStream#close()" -> "org.apache.catalina.manager.host.HostManagerServlet#add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)"
"java.io.OutputStream#close()" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.io.OutputStream#close()" -> "org.apache.catalina.startup.HostConfig#deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.OutputStream#close()" -> "org.apache.coyote.http11.upgrade.BioServletOutputStream#doClose()"
"java.io.OutputStream#close()" -> "org.apache.juli.FileHandler#openWriter()"
"java.io.OutputStream#close()" -> "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream#close()"
"java.io.OutputStream#close()" -> "org.apache.tomcat.util.http.fileupload.util.Streams#copy(java.io.InputStream,java.io.OutputStream,boolean,byte[])"
"java.io.OutputStream#close()" -> "org.apache.tomcat.websocket.WsRemoteEndpointImplBase#sendObjectByCompletion(java.lang.Object,javax.websocket.SendHandler)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.ha.session.DeltaRequest#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.ha.session.AttributeInfo#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.ha.session.SerializablePrincipal#writePrincipal(org.apache.catalina.realm.GenericPrincipal,java.io.ObjectOutput)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.tribes.ByteMessage#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.tribes.group.RpcMessage#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.tribes.group.NoRpcChannelReply#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.tribes.membership.MemberImpl#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeInt(int)" -> "org.apache.catalina.tribes.tipis.MapMessage#writeMembers(java.io.ObjectOutput,org.apache.catalina.tribes.Member[])"
"java.security.cert.CertificateFactory#getInstance(java.lang.String)" -> "org.apache.catalina.valves.SSLValve#invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String)" -> "org.apache.coyote.ajp.AbstractAjpProcessor#action(org.apache.coyote.ActionCode,java.lang.Object)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String)" -> "org.apache.coyote.http11.Http11AprProcessor#actionInternal(org.apache.coyote.ActionCode,java.lang.Object)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getCRLs(java.lang.String)"
"java.security.cert.CertificateFactory#getInstance(java.lang.String)" -> "org.apache.tomcat.util.net.jsse.JSSESupport#getX509Certificates(javax.net.ssl.SSLSession)"
"java.rmi.registry.LocateRegistry#createRegistry(int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)" -> "org.apache.catalina.mbeans.JmxRemoteLifecycleListener#createServer(java.lang.String,java.lang.String,int,int,HashMap<java.lang.String,java.lang.Object>,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)"
"java.io.ObjectOutput#write(byte[],int,int)" -> "org.apache.catalina.tribes.ByteMessage#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#write(byte[],int,int)" -> "org.apache.catalina.tribes.group.RpcMessage#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#write(byte[],int,int)" -> "org.apache.catalina.tribes.group.NoRpcChannelReply#writeExternal(java.io.ObjectOutput)"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#copy(java.io.File,java.io.File)"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.ha.deploy.FileMessageFactory#writeMessage(org.apache.catalina.ha.deploy.FileMessage)"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.ha.deploy.FileMessageFactory#cleanup()"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.manager.ManagerServlet#copyInternal(java.io.File,java.io.File,byte[])"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.servlets.CGIEnvironment#expandCGIScript()"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.session.FileStore#save(org.apache.catalina.Session)"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.session.StandardManager#doUnload()"
"java.io.FileOutputStream#close()" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FileOutputStream#close()" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.FileOutputStream#close()" -> "org.apache.jasper.JspC#openWebxmlWriter(java.io.File)"
"java.io.FileOutputStream#close()" -> "org.apache.juli.FileHandler#openWriter()"
"java.io.FileOutputStream#close()" -> "org.apache.naming.resources.FileDirContext#rebind(java.lang.String,java.lang.Object,javax.naming.directory.Attributes)"
"java.io.FileOutputStream#close()" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#write(java.io.File)"
"java.io.Writer#flush()" -> "org.apache.jasper.JspC#initWebXml()"
"java.io.Writer#flush()" -> "org.apache.jasper.runtime.JspWriterImpl#flush()"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "javax.el.ExpressionFactory#getClassNameServices(java.lang.ClassLoader)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#getReadme(javax.naming.directory.DirContext)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#copy(org.apache.naming.resources.CacheEntry,java.io.InputStream,java.io.PrintWriter)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.catalina.ssi.SSIFilter#doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.catalina.ssi.SSIServlet#processSSI(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.net.URL)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.el.parser.SimpleCharStream#SimpleCharStream(java.io.InputStream,java.lang.String,int,int,int)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.el.parser.SimpleCharStream#ReInit(java.io.InputStream,java.lang.String,int,int,int)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.jasper.JspC#openWebxmlReader(java.io.File)"
"java.io.InputStreamReader#InputStreamReader(java.io.InputStream,java.lang.String)" -> "org.apache.jasper.xmlparser.XMLEncodingDetector#createReader(java.io.InputStream,java.lang.String,java.lang.Boolean)"
"java.sql.Driver#connect(java.lang.String,java.util.Properties)" -> "org.apache.catalina.realm.JDBCRealm#open()"
"java.sql.Driver#connect(java.lang.String,java.util.Properties)" -> "org.apache.catalina.session.JDBCStore#open()"
"java.sql.Driver#connect(java.lang.String,java.util.Properties)" -> "org.apache.catalina.valves.JDBCAccessLogValve#open()"
"java.sql.Connection#close()" -> "org.apache.catalina.realm.DataSourceRealm#close(java.sql.Connection)"
"java.sql.Connection#close()" -> "org.apache.catalina.realm.JDBCRealm#close(java.sql.Connection)"
"java.sql.Connection#close()" -> "org.apache.catalina.session.JDBCStore#close(java.sql.Connection)"
"java.sql.Connection#close()" -> "org.apache.catalina.valves.JDBCAccessLogValve#close()"
"java.sql.PreparedStatement#executeUpdate()" -> "org.apache.catalina.valves.JDBCAccessLogValve#log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
"java.net.ServerSocket#bind(java.net.SocketAddress)" -> "org.apache.catalina.tribes.transport.ReceiverBase#bind(java.net.ServerSocket,int,int)"
"java.io.Writer#write(char[])" -> "org.apache.jasper.JspC#initWebXml()"
"java.io.Writer#write(char[])" -> "org.apache.jasper.JspC#completeWebXml()"
"java.io.Writer#write(char[])" -> "org.apache.jasper.runtime.BodyContentImpl#write(char[])"
"java.io.Writer#write(char[])" -> "org.apache.jasper.runtime.BodyContentImpl#print(char[])"
"java.io.DataInput#readInt()" -> "org.apache.catalina.ha.session.DeltaRequest#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.catalina.ha.session.AttributeInfo#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.catalina.ha.session.SerializablePrincipal#readPrincipal(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.catalina.tribes.ByteMessage#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.catalina.tribes.group.RpcMessage#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.catalina.tribes.group.NoRpcChannelReply#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.catalina.tribes.membership.MemberImpl#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.catalina.tribes.tipis.MapMessage#readMembers(java.io.ObjectInput)"
"java.io.DataInput#readInt()" -> "org.apache.tomcat.util.bcel.classfile.ClassParser#readAttributes()"
"java.io.DataInput#readInt()" -> "org.apache.tomcat.util.bcel.classfile.ClassParser#readID()"
"java.io.DataInput#readInt()" -> "org.apache.tomcat.util.bcel.classfile.ConstantInteger#ConstantInteger(java.io.DataInput)"
"java.io.DataInput#readInt()" -> "org.apache.tomcat.util.bcel.classfile.Utility#swallowAttribute(java.io.DataInput)"
"java.io.DataOutput#writeBoolean(boolean)" -> "org.apache.catalina.ha.session.DeltaRequest#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeBoolean(boolean)" -> "org.apache.catalina.ha.session.AttributeInfo#writeExternal(java.io.ObjectOutput)"
"java.io.DataOutput#writeBoolean(boolean)" -> "org.apache.catalina.ha.session.DeltaSession#writeObject(java.io.ObjectOutput)"
"java.io.DataOutput#writeBoolean(boolean)" -> "org.apache.catalina.ha.session.SerializablePrincipal#writePrincipal(org.apache.catalina.realm.GenericPrincipal,java.io.ObjectOutput)"
"java.io.DataOutput#writeBoolean(boolean)" -> "org.apache.catalina.tribes.group.RpcMessage#writeExternal(java.io.ObjectOutput)"
"java.sql.PreparedStatement#setLong(int,long)" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.sql.PreparedStatement#setLong(int,long)" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.sql.PreparedStatement#setLong(int,long)" -> "org.apache.catalina.valves.JDBCAccessLogValve#log(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response,long)"
"java.io.ObjectOutputStream#writeObject(java.lang.Object)" -> "org.apache.catalina.authenticator.SingleSignOnEntry#writeObject(java.io.ObjectOutputStream)"
"java.io.ObjectOutputStream#writeObject(java.lang.Object)" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessions(org.apache.catalina.Session[])"
"java.io.ObjectOutputStream#writeObject(java.lang.Object)" -> "org.apache.catalina.session.StandardManager#doUnload()"
"java.io.ObjectOutputStream#writeObject(java.lang.Object)" -> "org.apache.catalina.session.StandardSession#writeObject(java.io.ObjectOutputStream)"
"java.io.ObjectOutputStream#writeObject(java.lang.Object)" -> "org.apache.catalina.tribes.io.XByteBuffer#serialize(java.io.Serializable)"
"java.io.FileOutputStream#FileOutputStream(java.io.File,boolean)" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#copy(java.io.File,java.io.File)"
"java.io.FileOutputStream#FileOutputStream(java.io.File,boolean)" -> "org.apache.catalina.valves.AccessLogValve#open()"
"java.io.FileOutputStream#FileOutputStream(java.io.File,boolean)" -> "org.apache.juli.FileHandler#openWriter()"
"java.io.ObjectInput#readObject()" -> "org.apache.catalina.ha.session.AttributeInfo#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.catalina.ha.session.DeltaSession#readObject(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.catalina.ha.session.SerializablePrincipal#readPrincipal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.catalina.tribes.group.RpcMessage#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.el.lang.FunctionMapperImpl#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.el.lang.Function#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.el.lang.VariableMapperImpl#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.el.MethodExpressionImpl#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.el.MethodExpressionLiteral#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.el.ValueExpressionImpl#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.el.ValueExpressionLiteral#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.jasper.el.JspMethodExpression#readExternal(java.io.ObjectInput)"
"java.io.ObjectInput#readObject()" -> "org.apache.jasper.el.JspValueExpression#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readBoolean()" -> "org.apache.catalina.ha.session.DeltaRequest#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readBoolean()" -> "org.apache.catalina.ha.session.AttributeInfo#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readBoolean()" -> "org.apache.catalina.ha.session.DeltaSession#readObject(java.io.ObjectInput)"
"java.io.DataInput#readBoolean()" -> "org.apache.catalina.ha.session.SerializablePrincipal#readPrincipal(java.io.ObjectInput)"
"java.io.DataInput#readBoolean()" -> "org.apache.catalina.tribes.group.RpcMessage#readExternal(java.io.ObjectInput)"
"java.io.StringReader#skip(long)" -> "org.apache.tomcat.util.http.parser.HttpParser#skipConstant(java.io.StringReader,java.lang.String)"
"java.io.StringReader#skip(long)" -> "org.apache.tomcat.util.http.parser.HttpParser#readToken(java.io.StringReader)"
"java.io.StringReader#skip(long)" -> "org.apache.tomcat.util.http.parser.HttpParser#readQuotedToken(java.io.StringReader)"
"java.io.StringReader#skip(long)" -> "org.apache.tomcat.util.http.parser.HttpParser#readLhex(java.io.StringReader)"
"java.net.InetAddress#getByAddress(byte[])" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.net.InetAddress#getByAddress(byte[])" -> "org.apache.catalina.tribes.membership.MemberImpl#getHostname()"
"java.net.InetAddress#getByAddress(byte[])" -> "org.apache.catalina.tribes.transport.AbstractSender#setDestination(org.apache.catalina.tribes.Member)"
"java.lang.instrument.ClassFileTransformer#transform(java.lang.ClassLoader,java.lang.String,Class<?>,java.security.ProtectionDomain,byte[])" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.util.concurrent.locks.AbstractQueuedSynchronizer#acquireSharedInterruptibly(int)" -> "org.apache.tomcat.util.threads.LimitLatch#countUpOrAwait()"
"java.io.FilterOutputStream#close()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.io.FilterOutputStream#close()" -> "org.apache.catalina.manager.ManagerServlet#uploadWar(java.io.PrintWriter,javax.servlet.http.HttpServletRequest,java.io.File,org.apache.tomcat.util.res.StringManager)"
"java.io.FilterOutputStream#close()" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.io.FilterOutputStream#close()" -> "org.apache.catalina.session.StandardManager#doUnload()"
"java.io.FilterOutputStream#close()" -> "org.apache.catalina.startup.ExpandWar#expand(java.io.InputStream,java.io.File)"
"java.io.FilterOutputStream#close()" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FilterOutputStream#close()" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#write(java.io.File)"
"java.security.SecureRandom#getInstance(java.lang.String)" -> "org.apache.catalina.util.SessionIdGeneratorBase#createSecureRandom()"
"java.security.SecureRandom#getInstance(java.lang.String)" -> "org.apache.tomcat.websocket.Util#generateMask()"
"java.net.URLConnection#getOutputStream()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.lang.Integer#parseInt(java.lang.String)" -> "javax.el.ArrayELResolver#coerce(java.lang.Object)"
"java.lang.Integer#parseInt(java.lang.String)" -> "javax.el.ListELResolver#coerce(java.lang.Object)"
"java.lang.Integer#parseInt(java.lang.String)" -> "num.NumberGuessBean#setGuess(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.connector.Request#getIntHeader(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.core.StandardWrapper#setLoadOnStartupString(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.deploy.ErrorPage#setErrorCode(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.filters.ExpiresFilter#commaDelimitedListToIntArray(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.filters.ExpiresFilter#parseExpiresConfiguration(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.filters.RemoteIpFilter#setPorts(org.apache.catalina.filters.RemoteIpFilter.XForwardedRequest,int)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.filters.RemoteIpFilter#init(javax.servlet.FilterConfig)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.ha.backend.CollectedInfo#init(java.lang.String,int)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.ha.backend.TcpSender#init(org.apache.catalina.ha.backend.HeartbeatListener)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.manager.host.HostManagerServlet#init()"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.manager.HTMLManagerServlet#expireSessions(org.apache.catalina.util.ContextName,javax.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.manager.ManagerServlet#init()"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.manager.ManagerServlet#expireSessions(java.io.PrintWriter,org.apache.catalina.util.ContextName,javax.servlet.http.HttpServletRequest,org.apache.tomcat.util.res.StringManager)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.servlets.CGIRunner#getSCFromHttpStatusLine(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.servlets.CGIRunner#getSCFromCGIStatusHeader(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.servlets.DefaultServlet#init()"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.servlets.WebdavServlet#init()"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.servlets.WebdavServlet#doLock(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.ssi.SSIFilter#init(javax.servlet.FilterConfig)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.ssi.SSIServlet#init()"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.tribes.membership.McastService#start(int)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.util.Extension#isNewer(java.lang.String,java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.catalina.valves.RemoteIpValve#setPorts(org.apache.catalina.connector.Request,int)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.coyote.ajp.AbstractAjpProcessor#prepareRequest()"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.coyote.http11.AbstractHttp11Processor#setCompression(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.jasper.EmbeddedServletOptions#EmbeddedServletOptions(javax.servlet.ServletConfig,javax.servlet.ServletContext)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.jasper.JspC#setArgs(java.lang.String[])"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.jasper.runtime.TagHandlerPool#init(javax.servlet.ServletConfig)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.juli.FileHandler#configure()"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#getParameters(java.lang.String,java.lang.String,java.security.KeyStore)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.tomcat.util.net.URL#parse(java.lang.String,int,int)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.tomcat.websocket.PerMessageDeflate#negotiate(List<List<javax.websocket.Extension.Parameter>>,boolean)"
"java.lang.Integer#parseInt(java.lang.String)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#parseStatus(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "websocket.drawboard.DrawMessage#parseFromString(java.lang.String)"
"java.lang.Integer#parseInt(java.lang.String)" -> "websocket.tc7.echo.EchoMessage#getInitParameterIntValue(java.lang.String,int)"
"java.net.MulticastSocket#setLoopbackMode(boolean)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#setupSocket()"
"java.net.ServerSocket#setSoTimeout(int)" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#checkConfig()"
"java.net.ServerSocket#setSoTimeout(int)" -> "org.apache.tomcat.util.net.NioEndpoint#bind()"
"java.net.ServerSocket#setSoTimeout(int)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.ServerSocket)"
"java.util.logging.Handler#close()" -> "org.apache.juli.ClassLoaderLogManager#resetLoggers(org.apache.juli.ClassLoaderLogManager.ClassLoaderLogInfo)"
"java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)" -> "org.apache.catalina.valves.SSLValve#invoke(org.apache.catalina.connector.Request,org.apache.catalina.connector.Response)"
"java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)" -> "org.apache.coyote.ajp.AbstractAjpProcessor#action(org.apache.coyote.ActionCode,java.lang.Object)"
"java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)" -> "org.apache.coyote.http11.Http11AprProcessor#actionInternal(org.apache.coyote.ActionCode,java.lang.Object)"
"java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)" -> "org.apache.tomcat.util.net.jsse.JSSESupport#getX509Certificates(javax.net.ssl.SSLSession)"
"java.lang.Object#clone()" -> "org.apache.tomcat.util.buf.ByteChunk#getClone()"
"java.lang.Object#clone()" -> "org.apache.tomcat.util.buf.CharChunk#getClone()"
"java.lang.Object#clone()" -> "org.apache.tomcat.util.buf.CharChunk#subSequence(int,int)"
"java.lang.Object#clone()" -> "org.apache.tomcat.util.buf.MessageBytes#getClone()"
"java.io.Reader#close()" -> "org.apache.catalina.servlets.DefaultServlet#getReadme(javax.naming.directory.DirContext)"
"java.io.Reader#close()" -> "org.apache.catalina.servlets.DefaultServlet#copy(org.apache.naming.resources.CacheEntry,java.io.InputStream,java.io.PrintWriter)"
"java.io.Reader#close()" -> "org.apache.el.parser.SimpleCharStream#FillBuff()"
"java.lang.Thread#sleep(long)" -> "async.Async0#service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.lang.Thread#sleep(long)" -> "async#run()"
"java.lang.Thread#sleep(long)" -> "async.Async1#service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.lang.Thread#sleep(long)" -> "async.Async2#service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.lang.Thread#sleep(long)" -> "async.Stockticker#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.connector.CoyoteAdapter#postParseRequest(org.apache.coyote.Request,org.apache.catalina.connector.Request,org.apache.coyote.Response,org.apache.catalina.connector.Response)"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.core.ContainerBackgroundProcessor#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.core.StandardServer#await()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.core.StandardWrapper#unload()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.ha.session.DeltaManager#waitForSendAllSessions(long)"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.ha.session.DeltaManager#handleGET_ALL_SESSIONS(org.apache.catalina.ha.session.SessionMessage,org.apache.catalina.tribes.Member)"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.loader.WebappClassLoaderBase#clearReferencesThreads()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.startup.HostConfig#checkResources(org.apache.catalina.startup.HostConfig.DeployedApplication,boolean)"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.group.HeartbeatThread#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.group.interceptors.PingThread#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.membership.McastService#main(java.lang.String[])"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#waitForMembers(int)"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.membership.ReceiverThread#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.membership.SenderThread#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.membership.RecoveryThread#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#stopListening()"
"java.lang.Thread#sleep(long)" -> "org.apache.catalina.tribes.transport.ReceiverBase#bindUdp(java.net.DatagramSocket,int,int)"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.util.net.AbstractEndpoint#handleExceptionWithDelay(int)"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.util.net.AprEndpoint#stopInternal()"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.util.net.Acceptor#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.util.net.AsyncTimeout#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.util.net.Poller#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.util.net.Sendfile#run()"
"java.lang.Thread#sleep(long)" -> "org.apache.tomcat.websocket.WsBackgroundThread#run()"
"java.lang.Integer#valueOf(java.lang.String,int)" -> "org.apache.catalina.security.SecurityListener#checkUmask()"
"java.rmi.server.RMIClientSocketFactory#createSocket(java.lang.String,int)" -> "org.apache.catalina.mbeans.RmiClientLocalhostSocketFactory#createSocket(java.lang.String,int)"
"java.io.DataInput#readByte()" -> "org.apache.tomcat.util.bcel.classfile.Constant#readConstant(java.io.DataInput)"
"java.io.DataInput#readByte()" -> "org.apache.tomcat.util.bcel.classfile.ElementValue#readElementValue(java.io.DataInput,org.apache.tomcat.util.bcel.classfile.ConstantPool)"
"java.nio.channels.DatagramChannel#write(java.nio.ByteBuffer)" -> "org.apache.catalina.tribes.transport.nio.NioSender#write(java.nio.channels.SelectionKey)"
"java.io.ObjectOutput#write(byte[])" -> "org.apache.catalina.tribes.membership.MemberImpl#writeExternal(java.io.ObjectOutput)"
"java.io.ObjectOutput#write(byte[])" -> "org.apache.catalina.tribes.tipis.MapMessage#writeMembers(java.io.ObjectOutput,org.apache.catalina.tribes.Member[])"
"java.util.zip.Inflater#inflate(byte[],int,int)" -> "org.apache.tomcat.websocket.PerMessageDeflate#getMoreData(byte,boolean,int,java.nio.ByteBuffer)"
"java.nio.channels.DatagramChannel#open()" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#bind()"
"java.nio.channels.DatagramChannel#open()" -> "org.apache.catalina.tribes.transport.nio.NioSender#connect()"
"java.lang.Object#wait()" -> "chat.MessageSender#run()"
"java.lang.Object#wait()" -> "org.apache.catalina.core.StandardWrapper#allocate()"
"java.lang.Object#wait()" -> "org.apache.catalina.tribes.transport.RxTaskPool#getRxTask()"
"java.lang.Object#wait()" -> "org.apache.tomcat.util.net.Sendfile#run()"
"java.nio.channels.spi.AbstractSelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)" -> "org.apache.catalina.tribes.transport.nio.NioSender#connect()"
"java.nio.channels.spi.AbstractSelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)" -> "org.apache.catalina.tribes.transport.nio.NioSender#setMessage(byte[],int,int)"
"java.nio.channels.spi.AbstractSelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)" -> "org.apache.tomcat.util.net.BlockPoller#add(org.apache.tomcat.util.net.NioEndpoint.KeyAttachment,int,org.apache.tomcat.util.net.NioBlockingSelector.KeyReference)"
"java.nio.channels.spi.AbstractSelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)" -> "org.apache.tomcat.util.net#run()"
"java.nio.channels.spi.AbstractSelectableChannel#register(java.nio.channels.Selector,int,java.lang.Object)" -> "org.apache.tomcat.util.net.PollerEvent#run()"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.ant.jmx.JMXAccessorTask#convertStringToType(java.lang.String,java.lang.String)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.core.StandardServer#await()"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.ha.backend.MultiCastSender#send(java.lang.String)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.ha.backend.TcpSender#init(org.apache.catalina.ha.backend.HeartbeatListener)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.ha.backend.TcpSender#send(java.lang.String)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.mbeans.RmiServerBindSocketFactory#RmiServerBindSocketFactory(java.lang.String)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.mbeans.SslRmiServerBindSocketFactory#SslRmiServerBindSocketFactory(java.lang.String[],java.lang.String[],boolean,java.lang.String)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.tribes.membership.McastService#start(int)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.tribes.membership.MemberImpl#setHostname(java.lang.String)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.catalina.tribes.transport.ReceiverBase#getBind()"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.coyote.ajp.AbstractAjpProcessor#action(org.apache.coyote.ActionCode,java.lang.Object)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#setProperty(java.lang.Object,java.lang.String,java.lang.String,boolean)"
"java.net.InetAddress#getByName(java.lang.String)" -> "org.apache.tomcat.util.IntrospectionUtils#convert(java.lang.String,Class<?>)"
"java.util.jar.JarFile#getInputStream(java.util.zip.ZipEntry)" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.util.jar.JarFile#getInputStream(java.util.zip.ZipEntry)" -> "org.apache.catalina.startup.ExpandWar#expand(org.apache.catalina.Host,java.net.URL,java.lang.String)"
"java.util.jar.JarFile#getInputStream(java.util.zip.ZipEntry)" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.util.jar.JarFile#getInputStream(java.util.zip.ZipEntry)" -> "org.apache.tomcat.util.scan.FileUrlJar#getInputStream(java.lang.String)"
"java.util.jar.JarFile#getInputStream(java.util.zip.ZipEntry)" -> "org.apache.tomcat.util.scan.FileUrlJar#getEntryInputStream()"
"java.util.zip.ZipInputStream#close()" -> "org.apache.catalina.util.ExtensionValidator#getManifest(java.io.InputStream)"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.ant.ValidatorTask#execute()"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.connector.Request#parseParts()"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#getAppBase()"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#getAbsolutePath(java.lang.String)"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.loader.WebappClassLoaderBase#getURL(java.io.File,boolean)"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.loader.WebappClassLoaderBase#getURI(java.io.File)"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.manager.host.HostManagerServlet#add(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,org.apache.tomcat.util.res.StringManager)"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.manager.ManagerServlet#getAppBase()"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.startup.ClassLoaderFactory#createClassLoader(List<org.apache.catalina.startup.ClassLoaderFactory.Repository>,java.lang.ClassLoader)"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.startup.ClassLoaderFactory#validateFile(java.io.File,org.apache.catalina.startup.ClassLoaderFactory.RepositoryType)"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.startup.ContextConfig#fixDocBase()"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.startup.ContextConfig#getHostConfigBase()"
"java.io.File#getCanonicalFile()" -> "org.apache.catalina.startup.HostConfig#returnCanonicalPath(java.lang.String)"
"java.io.File#getCanonicalFile()" -> "org.apache.jasper.JspC#initServletContext(java.lang.ClassLoader)"
"java.io.File#getCanonicalFile()" -> "org.apache.jasper.JspC#initClassLoader()"
"java.io.File#getCanonicalFile()" -> "org.apache.naming.resources.FileDirContext#setDocBase(java.lang.String)"
"java.io.File#getCanonicalFile()" -> "org.apache.tomcat.util.http.fileupload.FileUtils#isSymlink(java.io.File)"
"java.nio.channels.SocketChannel#open()" -> "org.apache.catalina.tribes.transport.nio.NioSender#connect()"
"java.util.zip.DeflaterOutputStream#close()" -> "org.apache.catalina.tribes.group.interceptors.GzipInterceptor#compress(byte[])"
"java.util.zip.DeflaterOutputStream#close()" -> "org.apache.coyote.http11.filters.GzipOutputFilter#end()"
"java.net.URI#toURL()" -> "org.apache.catalina.ant.ValidatorTask#execute()"
"java.net.URI#toURL()" -> "org.apache.catalina.loader.WebappClassLoaderBase#start()"
"java.net.URI#toURL()" -> "org.apache.catalina.loader.WebappClassLoaderBase#getURL(java.io.File,boolean)"
"java.net.URI#toURL()" -> "org.apache.catalina.loader.WebappClassLoaderBase#getURI(java.io.File)"
"java.net.URI#toURL()" -> "org.apache.catalina.mbeans.MBeanFactory#createStandardContext(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.Catalina#load()"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.ClassLoaderFactory#createClassLoader(java.io.File[],java.io.File[],java.lang.ClassLoader)"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.ContextConfig#contextConfig(org.apache.tomcat.util.digester.Digester)"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.ContextConfig#getContextWebXmlSource()"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.FragmentJarScannerCallback#scan(java.io.File)"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.HostConfig#deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.HostConfig#deployWAR(org.apache.catalina.util.ContextName,java.io.File)"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.HostConfig#deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
"java.net.URI#toURL()" -> "org.apache.catalina.startup.Tomcat#getWebappConfigFileFromDirectory(java.io.File,java.lang.String)"
"java.net.URI#toURL()" -> "org.apache.jasper.JspC#initServletContext(java.lang.ClassLoader)"
"java.net.URI#toURL()" -> "org.apache.jasper.JspC#initClassLoader()"
"java.net.URI#toURL()" -> "org.apache.jasper.JspCompilationContext#createOutputDir()"
"java.net.URI#toURL()" -> "org.apache.tomcat.util.descriptor.LocalResolver#resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
"java.net.URI#toURL()" -> "org.apache.tomcat.util.file.ConfigFileLoader#getInputStream(java.lang.String)"
"java.net.URI#toURL()" -> "org.apache.tomcat.util.scan.StandardJarScanner#scan(javax.servlet.ServletContext,java.lang.ClassLoader,org.apache.tomcat.JarScannerCallback,Set<java.lang.String>)"
"java.io.BufferedWriter#close()" -> "org.apache.catalina.ha.backend.TcpSender#close(int)"
"java.net.URLClassLoader#definePackage(java.lang.String,java.util.jar.Manifest,java.net.URL)" -> "org.apache.catalina.loader.WebappClassLoaderBase#findClassInternal(java.lang.String)"
"java.io.ObjectOutputStream#close()" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessionId(java.lang.String)"
"java.io.ObjectOutputStream#close()" -> "org.apache.catalina.ha.session.DeltaManager#serializeSessions(org.apache.catalina.Session[])"
"java.io.ObjectOutputStream#close()" -> "org.apache.catalina.ha.session.DeltaRequest#serialize()"
"java.io.ObjectOutputStream#close()" -> "org.apache.catalina.session.FileStore#save(org.apache.catalina.Session)"
"java.io.ObjectOutputStream#close()" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.io.ObjectOutputStream#close()" -> "org.apache.catalina.session.StandardManager#doUnload()"
"java.net.URL#openStream()" -> "org.apache.catalina.loader.WebappClassLoaderBase#getResourceAsStream(java.lang.String)"
"java.net.URL#openStream()" -> "org.apache.catalina.loader.WebappClassLoaderBase#findLoadedResource(java.lang.String)"
"java.net.URL#openStream()" -> "org.apache.catalina.startup.CatalinaProperties#loadProperties()"
"java.net.URL#openStream()" -> "org.apache.catalina.startup.WebappServiceLoader#parseConfigFile(LinkedHashSet<java.lang.String>,java.net.URL)"
"java.net.URL#openStream()" -> "org.apache.jasper.servlet.JasperLoader#getResourceAsStream(java.lang.String)"
"java.net.URL#openStream()" -> "org.apache.jasper.servlet.JspCServletContext#getResource(java.lang.String)"
"java.net.URL#openStream()" -> "org.apache.jasper.servlet.JspCServletContext#getResourceAsStream(java.lang.String)"
"java.net.URL#openStream()" -> "org.apache.tomcat.util.file.ConfigFileLoader#getInputStream(java.lang.String)"
"java.net.URL#openStream()" -> "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsSerSource#execute()"
"java.net.URL#openStream()" -> "org.apache.tomcat.util.modeler.modules.ModelerSource#getInputStream()"
"java.net.URL#openStream()" -> "org.apache.tomcat.util.modeler.Registry#load(java.lang.String,java.lang.Object,java.lang.String)"
"java.lang.Class#getDeclaredMethods()" -> "org.apache.tomcat.websocket.pojo.PojoMethodMapping#PojoMethodMapping(Class<?>,List<Class<? extends javax.websocket.Decoder>>,java.lang.String)"
"java.nio.channels.SocketChannel#read(java.nio.ByteBuffer)" -> "org.apache.catalina.tribes.transport.nio.NioSender#read(java.nio.channels.SelectionKey)"
"java.nio.channels.SocketChannel#read(java.nio.ByteBuffer)" -> "org.apache.tomcat.util.net.NioChannel#read(java.nio.ByteBuffer)"
"java.nio.channels.SocketChannel#read(java.nio.ByteBuffer)" -> "org.apache.tomcat.util.net.SecureNioChannel#handshakeUnwrap(boolean)"
"java.nio.channels.SocketChannel#read(java.nio.ByteBuffer)" -> "org.apache.tomcat.util.net.SecureNioChannel#read(java.nio.ByteBuffer)"
"java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)" -> "org.apache.catalina.tribes.io.XByteBuffer#deserialize(byte[],int,int,java.lang.ClassLoader[])"
"java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)" -> "org.apache.tomcat.util.modeler.modules.MbeansDescriptorsSerSource#execute()"
"java.lang.Float#parseFloat(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Float#parseFloat(java.lang.String)" -> "org.apache.tomcat.util.digester.XercesParser#newSAXParser(java.util.Properties)"
"java.io.FileOutputStream#FileOutputStream(java.lang.String)" -> "org.apache.catalina.session.FileStore#save(org.apache.catalina.Session)"
"java.io.FileOutputStream#FileOutputStream(java.lang.String)" -> "org.apache.catalina.session.StandardManager#doUnload()"
"java.io.FileOutputStream#FileOutputStream(java.lang.String)" -> "org.apache.tomcat.util.modeler.modules.MbeansSource#save()"
"java.lang.Float#valueOf(java.lang.String)" -> "org.apache.catalina.ant.jmx.JMXAccessorTask#convertStringToType(java.lang.String,java.lang.String)"
"java.lang.Float#valueOf(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#addEnvironment(org.apache.catalina.deploy.ContextEnvironment)"
"java.lang.Float#valueOf(java.lang.String)" -> "org.apache.el.lang.ELSupport#coerceToNumber(java.lang.String,Class<?>)"
"java.lang.Float#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#convert(java.lang.String,java.lang.String,Class<?>,Class<?>)"
"java.lang.Float#valueOf(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Float#valueOf(java.lang.String)" -> "org.apache.naming.factory.BeanFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.lang.Float#valueOf(java.lang.String)" -> "org.apache.tomcat.websocket.Util#coerceToType(Class<?>,java.lang.String)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "javax.el.ExpressionFactory#getClassNameJreDir()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.ant.ValidatorTask#execute()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.ha.deploy.FarmWarDeployer#copy(java.io.File,java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.ha.deploy.FileMessageFactory#FileMessageFactory(java.io.File,boolean)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.manager.ManagerServlet#copyInternal(java.io.File,java.io.File,byte[])"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.servlets.DefaultServlet#doPut(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.servlets.DefaultServlet#findXsltInputStream(javax.naming.directory.DirContext)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.Catalina#stopServer(java.lang.String[])"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.Catalina#load()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.CatalinaProperties#loadProperties()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.ContextConfig#getWebXmlSource(java.lang.String,java.lang.String)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.ContextConfig#processAnnotationsFile(java.io.File,org.apache.catalina.deploy.WebXml,boolean)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.FragmentJarScannerCallback#scan(java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.ExpandWar#copy(java.io.File,java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.HostConfig#deployDescriptor(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.HostConfig#deployDirectory(org.apache.catalina.util.ContextName,java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.startup.TldConfig#tldScanDir(java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.catalina.util.ExtensionValidator#addSystemResource(java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.jasper.JspC#mergeIntoWebXml()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.jasper.JspC#openWebxmlReader(java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.juli.ClassLoaderLogManager#readConfiguration(java.lang.ClassLoader)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.naming.resources.FileResource#streamContent()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.buildutil.CheckEol#check(java.io.File,List<org.apache.tomcat.buildutil.CheckEol.CheckFailure>,org.apache.tomcat.buildutil.CheckEol.Mode)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.digester.Digester#parse(java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.file.ConfigFileLoader#getInputStream(java.lang.String)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#getInputStream()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#get()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.http.fileupload.disk.DiskFileItem#write(java.io.File)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.modeler.modules.ModelerSource#getInputStream()"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.modeler.Registry#load(java.lang.String,java.lang.Object,java.lang.String)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.util.net.Poller#processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint.KeyAttachment,boolean)"
"java.io.FileInputStream#FileInputStream(java.io.File)" -> "org.apache.tomcat.websocket.WsWebSocketContainer#createSSLEngine(Map<java.lang.String,java.lang.Object>)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.realm.DataSourceRealm#credentials(java.sql.Connection,java.lang.String)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.realm.DataSourceRealm#roles(java.sql.Connection,java.lang.String)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.realm.JDBCRealm#credentials(java.sql.Connection,java.lang.String)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.realm.JDBCRealm#roles(java.sql.Connection,java.lang.String)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.session.JDBCStore#keys(boolean)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.session.JDBCStore#getSize()"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.session.JDBCStore#load(java.lang.String)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.session.JDBCStore#remove(java.lang.String,java.sql.Connection)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.session.JDBCStore#clear()"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.session.JDBCStore#save(org.apache.catalina.Session)"
"java.sql.Connection#prepareStatement(java.lang.String)" -> "org.apache.catalina.valves.JDBCAccessLogValve#open()"
"java.nio.channels.spi.AbstractSelectableChannel#configureBlocking(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#bind()"
"java.nio.channels.spi.AbstractSelectableChannel#configureBlocking(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#configureDatagraChannel()"
"java.nio.channels.spi.AbstractSelectableChannel#configureBlocking(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.nio.channels.spi.AbstractSelectableChannel#configureBlocking(boolean)" -> "org.apache.tomcat.util.net.NioEndpoint#bind()"
"java.nio.channels.spi.AbstractSelectableChannel#configureBlocking(boolean)" -> "org.apache.tomcat.util.net.NioEndpoint#setSocketOptions(java.nio.channels.SocketChannel)"
"java.lang.Byte#parseByte(java.lang.String)" -> "org.apache.catalina.tribes.util.Arrays#fromString(java.lang.String)"
"java.lang.Byte#parseByte(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.catalina.core.StandardServer#await()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.catalina.tribes.group.interceptors.TcpFailureDetector#memberAlive(org.apache.catalina.tribes.Member,byte[],boolean,boolean,long,long,int)"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.coyote.ajp.AjpProcessor#process(SocketWrapper<java.net.Socket>)"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.coyote.http11.Http11NioProcessor#setSocketTimeout(int)"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.coyote.http11.Http11Processor#setRequestLineReadTimeout()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.coyote.http11.Http11Processor#setSocketTimeout(int)"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.coyote.http11.upgrade.BioProcessor#BioProcessor(SocketWrapper<java.net.Socket>,org.apache.coyote.http11.upgrade.servlet31.HttpUpgradeHandler,int)"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.coyote.http11.upgrade.UpgradeBioProcessor#UpgradeBioProcessor(SocketWrapper<java.net.Socket>,org.apache.coyote.http11.upgrade.UpgradeInbound)"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.tomcat.util.net.AbstractEndpoint#unlockAccept()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.tomcat.util.net.jsse.JSSESupport#handShake()"
"java.net.Socket#setSoTimeout(int)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.util.logging.Logger#removeHandler(java.util.logging.Handler)" -> "org.apache.juli.ClassLoaderLogManager#resetLoggers(org.apache.juli.ClassLoaderLogManager.ClassLoaderLogInfo)"
"java.util.jar.JarFile#getManifest()" -> "org.apache.catalina.loader.WebappClassLoaderBase#findResourceInternal(java.lang.String,java.lang.String,boolean)"
"java.net.MulticastSocket#setTimeToLive(int)" -> "org.apache.catalina.ha.backend.MultiCastSender#send(java.lang.String)"
"java.net.MulticastSocket#setTimeToLive(int)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#setupSocket()"
"java.net.ServerSocket#close()" -> "org.apache.catalina.core.StandardServer#stopAwait()"
"java.net.ServerSocket#close()" -> "org.apache.catalina.core.StandardServer#await()"
"java.net.ServerSocket#close()" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#stop()"
"java.net.ServerSocket#close()" -> "org.apache.tomcat.util.net.JIoEndpoint#unbind()"
"java.net.ServerSocket#close()" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#JSSESocketFactory(AbstractEndpoint<?>)"
"java.net.ServerSocket#close()" -> "org.apache.tomcat.util.net.jsse.JSSESocketFactory#checkConfig()"
"java.net.ServerSocket#close()" -> "org.apache.tomcat.util.net.NioEndpoint#unbind()"
"java.lang.Thread#join()" -> "async.Stockticker#stop()"
"java.lang.Thread#join()" -> "org.apache.catalina.core.ContainerBase#threadStop()"
"java.net.ServerSocket#bind(java.net.SocketAddress,int)" -> "org.apache.tomcat.util.net.NioEndpoint#bind()"
"java.io.DataInput#readFloat()" -> "org.apache.tomcat.util.bcel.classfile.ConstantFloat#ConstantFloat(java.io.DataInput)"
"java.net.DatagramSocket#setReuseAddress(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#configureDatagraChannel()"
"java.net.DatagramSocket#setReuseAddress(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.MulticastSocket#MulticastSocket(java.net.SocketAddress)" -> "org.apache.catalina.ha.backend.MultiCastSender#send(java.lang.String)"
"java.net.MulticastSocket#MulticastSocket(java.net.SocketAddress)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#setupSocket()"
"java.net.Socket#setReceiveBufferSize(int)" -> "org.apache.catalina.tribes.transport.bio.BioReceiver#listen()"
"java.net.Socket#setReceiveBufferSize(int)" -> "org.apache.catalina.tribes.transport.bio.BioSender#openSocket()"
"java.net.Socket#setReceiveBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#listen()"
"java.net.Socket#setReceiveBufferSize(int)" -> "org.apache.catalina.tribes.transport.nio.NioSender#configureSocket()"
"java.net.Socket#setReceiveBufferSize(int)" -> "org.apache.tomcat.util.net.SocketProperties#setProperties(java.net.Socket)"
"java.io.DataInput#readFully(byte[])" -> "org.apache.catalina.tribes.ByteMessage#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readFully(byte[])" -> "org.apache.catalina.tribes.group.RpcMessage#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readFully(byte[])" -> "org.apache.catalina.tribes.group.NoRpcChannelReply#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readFully(byte[])" -> "org.apache.catalina.tribes.membership.MemberImpl#readExternal(java.io.ObjectInput)"
"java.io.DataInput#readFully(byte[])" -> "org.apache.catalina.tribes.tipis.MapMessage#readMembers(java.io.ObjectInput)"
"java.lang.Byte#decode(java.lang.String)" -> "org.apache.catalina.core.NamingContextListener#addEnvironment(org.apache.catalina.deploy.ContextEnvironment)"
"java.io.InputStream#reset()" -> "org.apache.jasper.xmlparser.ASCIIReader#reset()"
"java.io.InputStream#reset()" -> "org.apache.jasper.xmlparser.UCSReader#reset()"
"java.io.InputStream#reset()" -> "org.apache.jasper.xmlparser.XMLEncodingDetector#createInitialReader()"
"java.lang.Runtime#exec(java.lang.String[],java.lang.String[],java.io.File)" -> "org.apache.catalina.servlets.CGIRunner#run()"
"java.net.MulticastSocket#joinGroup(java.net.InetAddress)" -> "org.apache.catalina.ha.backend.MultiCastSender#send(java.lang.String)"
"java.net.MulticastSocket#joinGroup(java.net.InetAddress)" -> "org.apache.catalina.tribes.membership.McastServiceImpl#start(int)"
"java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)" -> "org.apache.catalina.tribes.transport.nio.NioReplicationTask#sendAck(java.nio.channels.SelectionKey,java.nio.channels.WritableByteChannel,byte[],java.net.SocketAddress)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.core.JasperListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.core.JreMemoryLeakPreventionListener#lifecycleEvent(org.apache.catalina.LifecycleEvent)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.loader.WebappClassLoaderBase#loadClass(java.lang.String,boolean)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.realm.JAASRealm#parseClassNames(java.lang.String,List<java.lang.String>)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.startup.WebappServiceLoader#loadServices(Class<T>,LinkedHashSet<java.lang.String>)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.tribes.group.GroupChannel#setupDefaultStack()"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.tribes.io.ReplicationStream#findReplicationClass(java.lang.String)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.tribes.io.ReplicationStream#findExternalClass(java.lang.String)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.catalina.util.CustomObjectInputStream#resolveClass(java.io.ObjectStreamClass)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.el.util.ReflectionUtil#forName(java.lang.String)"
"java.lang.Class#forName(java.lang.String,boolean,java.lang.ClassLoader)" -> "org.apache.naming.factory.ResourceLinkFactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,Hashtable<?,?>)"
"java.sql.ResultSet#getInt(int)" -> "org.apache.catalina.session.JDBCStore#getSize()"
"java.nio.channels.SelectableChannel#configureBlocking(boolean)" -> "org.apache.catalina.tribes.transport.nio.NioReceiver#registerChannel(java.nio.channels.Selector,java.nio.channels.SelectableChannel,int,java.lang.Object)"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.catalina.authenticator.DigestAuthenticator#DigestAuthenticator()"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.catalina.realm.RealmBase#startInternal()"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.catalina.realm.RealmBase#getDigest(java.lang.String,java.lang.String)"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.catalina.realm.RealmBase#Digest(java.lang.String,java.lang.String,java.lang.String)"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.catalina.servlets.WebdavServlet#init()"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.catalina.websocket.WebSocketServlet#getWebSocketAccept(java.lang.String)"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.tomcat.util.security.ConcurrentMessageDigest#digest(java.lang.String,byte[][])"
"java.security.MessageDigest#getInstance(java.lang.String)" -> "org.apache.tomcat.util.security.ConcurrentMessageDigest#init(java.lang.String)"
"java.io.BufferedInputStream#close()" -> "org.apache.catalina.ant.DeployTask#execute()"
"java.io.BufferedInputStream#close()" -> "org.apache.catalina.servlets.DefaultServlet#executePartialPut(javax.servlet.http.HttpServletRequest,org.apache.catalina.servlets.DefaultServlet.Range,java.lang.String)"
"java.io.BufferedInputStream#close()" -> "org.apache.catalina.session.StandardManager#doLoad()"
"java.io.BufferedInputStream#close()" -> "org.apache.tomcat.buildutil.CheckEol#check(java.io.File,List<org.apache.tomcat.buildutil.CheckEol.CheckFailure>,org.apache.tomcat.buildutil.CheckEol.Mode)"
"java.net.URLConnection#connect()" -> "org.apache.catalina.ant.AbstractCatalinaTask#execute(java.lang.String,java.io.InputStream,java.lang.String,int)"
"java.util.zip.GZIPOutputStream#write(byte[],int,int)" -> "org.apache.coyote.http11.filters.GzipOutputFilter#doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)"
"java.io.Writer#write(char[],int,int)" -> "org.apache.catalina.util.IOTools#flow(java.io.Reader,java.io.Writer,char[])"
"java.io.Writer#write(char[],int,int)" -> "org.apache.jasper.runtime.BodyContentImpl#write(char[],int,int)"
"java.io.Writer#write(char[],int,int)" -> "org.apache.jasper.runtime.BodyContentImpl#writeOut(java.io.Writer)"
"java.io.Writer#write(char[],int,int)" -> "org.apache.jasper.runtime.JspWriterImpl#flushBuffer()"
"java.io.Writer#write(char[],int,int)" -> "org.apache.jasper.runtime.JspWriterImpl#write(char[],int,int)"
"java.io.Writer#write(char[],int,int)" -> "org.apache.jasper.tagplugins.jstl.core.Out#output(javax.servlet.jsp.JspWriter,java.lang.Object,java.lang.String,java.lang.String,boolean)"
"java.lang.Short#parseShort(java.lang.String)" -> "org.apache.jasper.runtime.JspRuntimeLibrary#createTypedArray(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.lang.String[],Class<?>,Class<?>)"
"java.lang.Thread#join(long)" -> "org.apache.catalina.core.StandardServer#stopAwait()"
"java.lang.Thread#join(long)" -> "org.apache.catalina.servlets.CGIRunner#run()"

